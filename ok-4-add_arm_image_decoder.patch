commit 2cf1c575ea0776c7475fc0d7366be081f93b36df
Author: Dmitry Grinberg <dmitrygr@gmail.com>
Date:   Fri Dec 23 01:16:17 2022 -0600

    add ARM image decoder

diff --git a/.gitignore b/.gitignore
index b1a65c6..75d561e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -12,3 +12,4 @@ Tavisco_Data/*.BIN
 *.bin
 *.bak
 Tavisco_Data
+*.elf
diff --git a/Makefile b/Makefile
index 1368c66..fef5cc1 100644
--- a/Makefile
+++ b/Makefile
@@ -1,15 +1,25 @@
 TOOLCHAIN		?=	/home/tavisco/Palm/palmdev_V3/buildtools/toolchain/bin
 SDK				?=	/home/tavisco/Palm/palmdev_V3/buildtools/palm-os-sdk-master/sdk-5r3/include
 PILRC			?=	/home/tavisco/Palm/palmdev_V3/buildtools/pilrc3_3_unofficial/bin/pilrc
+ARMTOOLCHAIN	?=	arm-none-eabi-
 CC				=	$(TOOLCHAIN)/m68k-none-elf-gcc
 LD				=	$(TOOLCHAIN)/m68k-none-elf-gcc
 OBJCOPY			=	$(TOOLCHAIN)/m68k-none-elf-objcopy
-COMMON			=	-Wno-multichar -funsafe-math-optimizations -Os -m68000 -mno-align-int -mpcrel -fpic -fshort-enums -DPNGLE_NO_GAMMA_CORRECTION
+ARMCC			=	$(ARMTOOLCHAIN)gcc
+ARMLD			=	$(ARMTOOLCHAIN)gcc
+ARMOBJCOPY		=	$(ARMTOOLCHAIN)objcopy
+COMMON			=	-DPNGLE_NO_GAMMA_CORRECTION
+M68KCOMMON		=	$(COMMON) -Wno-multichar -funsafe-math-optimizations -Os -m68000 -mno-align-int -mpcrel -fpic -fshort-enums
+ARMCOMMON		=	$(COMMON) -Os -march=armv4t -mthumb -mno-unaligned-access -ffixed-r9 -ffixed-r10 -ffixed-r11 -fomit-frame-pointer -D__ARM__ -ffreestanding -fpic -mthumb-interwork
 WARN			=	-Wsign-compare -Wextra -Wall -Wno-unused-parameter -Wno-old-style-declaration -Wno-unused-function -Wno-unused-variable -Wno-error=cpp -Wno-error=switch
-LKR				=	linker.lkr
-CCFLAGS			=	$(LTO) $(WARN) $(COMMON) -I. -ffunction-sections -fdata-sections
-LDFLAGS			=	$(LTO) $(WARN) $(COMMON) -Wl,--gc-sections -Wl,-T $(LKR)
-SRCS-68k		=   Src/Palmkedex.c Src/Main.c Src/PkmnMain.c Src/PkmnType.c Src/helpers.c Src/miniz.c Src/pngle.c Src/pngDraw.c
+LKR				=	Src/68k.lkr
+ARMLKR			=	src/arm.lkr
+CCFLAGS			=	$(LTO) $(WARN) $(M68KCOMMON) -I. -ffunction-sections -fdata-sections
+LDFLAGS			=	$(LTO) $(WARN) $(M68KCOMMON) -Wl,--gc-sections -Wl,-T $(LKR)
+ARMCCFLAGS		=	$(ARMLTO) $(WARN) $(ARMCOMMON) -I. -ffunction-sections -fdata-sections
+ARMLDFLAGS		=	$(ARMLTO) $(WARN) $(ARMCOMMON) -Wl,--gc-sections -Wl,-T $(ARMLKR)
+SRCS-68k		=   Src/Palmkedex.c Src/Main.c Src/PkmnMain.c Src/PkmnType.c Src/helpers.c Src/miniz.c Src/pngle.c Src/pngDraw.c Src/pngDraw-68k.c
+SRCS-arm		=	Src/helpers.c Src/miniz.c Src/pngle.c Src/pngDrawArm.c Src/armcalls.c
 RCP				=	Rsc/Palmkedex_Rsc.rcp
 SPRITESRCP		=	Rsc/pkmn_sprites.rcp
 RSC				=	Src/
@@ -33,22 +43,31 @@ INCS			+=	-isystem "$(SDK)/Libraries/PalmOSGlue"
 
 #leave this alone
 OBJS-68k		=	$(patsubst %.S,%.68k.o,$(patsubst %.c,%.68k.o,$(SRCS-68k)))
-
+OBJS-arm		=	$(patsubst %.S,%.arm.o,$(patsubst %.c,%.arm.o,$(SRCS-arm)))
 
 all: $(TARGET).prc $(TARGETSPRITES).prc
 
-$(TARGET).prc: code0001.68k.bin
+$(TARGET).prc: code0001.68k.bin armc0001.arm.bin
 	$(PILRC) -ro -o $(TARGET).prc -creator $(CREATOR) -type $(TYPE) -name $(TARGET) -I $(RSC) $(RCP)
 
 %.68k.bin: %.68k.elf
 	$(OBJCOPY) -O binary $< $@ -j.vec -j.text -j.rodata
 
+%.arm.bin: %.arm.elf
+	$(ARMOBJCOPY) -O binary $< $@ -j.text -j.rodata
+
 %.68k.elf: $(OBJS-68k)
 	$(LD) -o $@ $(LDFLAGS) $^
 
+%.arm.elf: $(OBJS-arm)
+	$(ARMLD) -o $@ $(ARMLDFLAGS) $^
+
 %.68k.o : %.c Makefile
 	$(CC) $(CCFLAGS)  $(INCS) -c $< -o $@
 
+%.arm.o : %.c Makefile
+	$(ARMCC) $(ARMCCFLAGS) $(INCS) -c $< -o $@
+
 $(TARGETSPRITES).prc:
 	$(PILRC) -ro -o $(TARGETSPRITES).prc -creator $(SPRITECREATOR) -type $(SPRITETYPE) -name $(TARGETSPRITES) $(SPRITESRCP)
 
diff --git a/Rsc/Palmkedex_Rsc.rcp b/Rsc/Palmkedex_Rsc.rcp
index b19b959..b32359e 100644
--- a/Rsc/Palmkedex_Rsc.rcp
+++ b/Rsc/Palmkedex_Rsc.rcp
@@ -4,6 +4,7 @@
 
 // Use this for GCC
 DATA "code" ID 1 "code0001.68k.bin"
+DATA "armc" ID 1 "armc0001.arm.bin"
 GENERATEHEADER "Rsc/Palmkedex_Rsc.h"
 
 // Use this for CodeWarrior
diff --git a/linker.lkr b/Src/68k.lkr
similarity index 100%
rename from linker.lkr
rename to Src/68k.lkr
diff --git a/Src/Main.o b/Src/Main.o
deleted file mode 100644
index e5453f1..0000000
Binary files a/Src/Main.o and /dev/null differ
diff --git a/Src/arm.lkr b/Src/arm.lkr
new file mode 100644
index 0000000..3b24682
--- /dev/null
+++ b/Src/arm.lkr
@@ -0,0 +1,35 @@
+
+MEMORY
+{
+	rom : ORIGIN = 0x10000000, LENGTH = 256K
+	ram : ORIGIN = 0x20000000, LENGTH = 512K
+	
+	trash : ORIGIN = 0xffff0000, LENGTH = 65535
+}
+
+SECTIONS
+{
+	.text : {
+	
+		KEEP( *(.vector) ) ;
+		*(.vector);
+		
+		*(.text) *(.text.*) ; 
+		
+	 	. = ALIGN(4); 
+		KEEP ( *( SORT ( .patches ) ) ) ;
+		KEEP ( *( SORT ( .patches.* ) ) ) ;
+		
+	}  > rom
+	.rodata : { *(.rodata) *(.rodata.*) ; . = ALIGN(4); __data_data = ABSOLUTE(.) ; }  > rom
+
+	.data : AT ( ADDR ( .rodata ) + SIZEOF ( .rodata ) ) { . = ALIGN(4); __data_start = ADDR ( .data ) + . ; *(.data) ; *(.data.*) ; . = ALIGN(4); __data_end = ADDR ( .data ) + . ; } > ram
+	
+	.bss  :  { . = ALIGN(4); __bss_start = ABSOLUTE(.) ; *(.bss) *(.bss.*) *(COMMON) ; . = ALIGN(4); __bss_end  = ABSOLUTE(.) ; } > ram
+	
+	.trash1 : { *(.ARM.exidx) *(.ARM.exidx.*) ; }  > trash
+	.trash2 : { *(.init) *(.init.*) ; *(.fini) *(.fini.*) ; }  > trash
+}
+
+
+
diff --git a/Src/armcalls.c b/Src/armcalls.c
new file mode 100644
index 0000000..5675b79
--- /dev/null
+++ b/Src/armcalls.c
@@ -0,0 +1,97 @@
+#include "armcalls.h"
+#include <PceNativeCall.h>
+#include <CoreTraps.h>
+#include <stdint.h>
+
+
+register Call68KFuncType *call68KFuncP asm ("r11");
+register void *emulStateP asm ("r10");
+
+
+void __attribute__((naked)) armCallsInit(void *emulStateP, void *call68KFuncP)
+{
+	asm volatile(
+		"mov	r10, r0	\n"
+		"mov	r11, r1	\n"
+		"bx		lr		\n"
+	);
+}
+
+void* MemPtrNew(uint32_t size)
+{
+	uint32_t stackParam = __builtin_bswap32(size);
+	
+	return (void*)call68KFuncP(emulStateP, PceNativeTrapNo(sysTrapMemPtrNew), &stackParam, sizeof(stackParam) | kPceNativeWantA0);
+}
+
+void MemChunkFree(void *ptr)
+{
+	uint32_t stackParam = __builtin_bswap32((uintptr_t)ptr);
+	
+	call68KFuncP(emulStateP, PceNativeTrapNo(sysTrapMemChunkFree), &stackParam, sizeof(stackParam));
+}
+
+Err MemSet(void *dst, uint32_t len, uint8_t val)
+{
+	struct {
+		uint32_t dst;
+		uint32_t len;
+		uint16_t val;
+	} stackParams = {
+		.dst = __builtin_bswap32((uintptr_t)dst),
+		.len = __builtin_bswap32(len),
+		.val = val,
+	};
+	
+	return call68KFuncP(emulStateP, PceNativeTrapNo(sysTrapMemSet), &stackParams, sizeof(stackParams));
+}
+
+Err MemMove(void *dst, void *src, uint32_t len)
+{
+	struct {
+		uint32_t dst;
+		uint32_t src;
+		uint32_t len;
+	} stackParams = {
+		.dst = __builtin_bswap32((uintptr_t)dst),
+		.src = __builtin_bswap32((uintptr_t)src),
+		.len = __builtin_bswap32(len),
+	};
+	
+	return call68KFuncP(emulStateP, PceNativeTrapNo(sysTrapMemMove), &stackParams, sizeof(stackParams));
+}
+
+uint16_t MemPtrResize(void *ptr, uint32_t len)
+{
+	struct {
+		uint32_t ptr;
+		uint32_t len;
+	} stackParams = {
+		.ptr = __builtin_bswap32((uintptr_t)ptr),
+		.len = __builtin_bswap32(len),
+	};
+	
+	return call68KFuncP(emulStateP, PceNativeTrapNo(sysTrapMemPtrResize), &stackParams, sizeof(stackParams));
+}
+
+uint32_t MemPtrSize(void *ptr)
+{
+	uint32_t stackParam = __builtin_bswap32((uintptr_t)ptr);
+	
+	return call68KFuncP(emulStateP, PceNativeTrapNo(sysTrapMemPtrSize), &stackParam, sizeof(stackParam));
+}
+
+uint16_t FrmCustomAlert(uint16_t id, char *s1, char *s2, char *s3)
+{
+	struct {
+		uint16_t id;
+		uint32_t s1, s2, s3;
+	} __attribute__((packed)) stackParams = {
+		.id = __builtin_bswap16(id),
+		.s1 = __builtin_bswap32((uintptr_t)s1),
+		.s2 = __builtin_bswap32((uintptr_t)s2),
+		.s3 = __builtin_bswap32((uintptr_t)s3),
+	};
+	
+	return call68KFuncP(emulStateP, PceNativeTrapNo(sysTrapFrmCustomAlert), &stackParams, sizeof(stackParams));
+}
\ No newline at end of file
diff --git a/Src/armcalls.h b/Src/armcalls.h
new file mode 100644
index 0000000..de004bd
--- /dev/null
+++ b/Src/armcalls.h
@@ -0,0 +1,9 @@
+#ifndef _ARM_CALLS_H_
+#define _ARM_CALLS_H_
+
+
+
+void armCallsInit(void *emulStateP, void *call68KFuncP);
+
+
+#endif
diff --git a/Src/helpers.c b/Src/helpers.c
index 002d360..65fc0e0 100644
--- a/Src/helpers.c
+++ b/Src/helpers.c
@@ -1,20 +1,22 @@
 #include <PalmOS.h>
 #include <stdarg.h>
 
-static void debug_printf(const char* fmt, ...) {
-    UInt32 ftrValue;
-    char buffer[256];
-    va_list args;
-
-    if (FtrGet('cldp', 0, &ftrValue) || ftrValue != 0x20150103) return;
-
-    va_start(args, fmt);
-
-    if (StrVPrintF(buffer, fmt, (_Palm_va_list)args) > 255)
-        DbgMessage("DebugLog: buffer overflowed, memory corruption ahead");
-    else
-        DbgMessage(buffer);
-}
+#ifndef __ARM__
+	static void debug_printf(const char* fmt, ...) {
+	    UInt32 ftrValue;
+	    char buffer[256];
+	    va_list args;
+	
+	    if (FtrGet('cldp', 0, &ftrValue) || ftrValue != 0x20150103) return;
+	
+	    va_start(args, fmt);
+	
+	    if (StrVPrintF(buffer, fmt, (_Palm_va_list)args) > 255)
+	        DbgMessage("DebugLog: buffer overflowed, memory corruption ahead");
+	    else
+	        DbgMessage(buffer);
+	}
+#endif
 
 void* malloc(UInt32 sz) { return MemPtrNew(sz); }
 
diff --git a/Src/miniz.c b/Src/miniz.c
index a393fba..375e73e 100644
--- a/Src/miniz.c
+++ b/Src/miniz.c
@@ -470,8 +470,7 @@ const char *mz_error(UInt32 err);
 #endif // MINIZ_NO_ZLIB_APIS
 
 // ------------------- Types and macros
-
-#include <PalmOS.h>
+#include <PalmTypes.h>
 #include <stdarg.h>
 
 typedef unsigned char mz_uint8;
@@ -962,7 +961,7 @@ typedef unsigned char mz_validate_uint64[sizeof(mz_uint64)==8 ? 1 : -1];
 
 #define MZ_MAX(a,b) (((a)>(b))?(a):(b))
 #define MZ_MIN(a,b) (((a)<(b))?(a):(b))
-#define MZ_CLEAR_OBJ(obj) MemSet(&(obj), sizeof(obj), 0)
+#define MZ_CLEAR_OBJ(obj) memset(&(obj), 0, sizeof(obj))
 
 #if MINIZ_USE_UNALIGNED_LOADS_AND_STORES && MINIZ_LITTLE_ENDIAN
   #define MZ_READ_LE16(p) *((const mz_uint16 *)(p))
diff --git a/Src/pngDraw-68k.c b/Src/pngDraw-68k.c
new file mode 100644
index 0000000..9244982
--- /dev/null
+++ b/Src/pngDraw-68k.c
@@ -0,0 +1,29 @@
+#include <PalmOS.h>
+#include "Src/pngle.h"
+#include "pngDrawInt.h"
+
+
+void on_draw(pngle_t *pngle, uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint8_t rgba[4], struct DrawState *ds)
+{
+	uint_fast16_t r = rgba[0] & 0xf8;
+	uint_fast16_t g = rgba[1] & 0xfc;
+	uint_fast16_t b = rgba[2] & 0xf8;
+	uint_fast16_t color = (r << 8) + (g << 3) + (b >> 3);
+
+	uint16_t *dst = ds->bits + (UInt32)(UInt16)y * (UInt32)(UInt16)ds->rowHalfwords + x;
+
+	*dst = color;
+}
+
+int pngDrawDecode(struct DrawState *ds, const void *data, uint32_t dataSz)
+{
+	pngle_t *pngle;
+	int ret;
+
+	pngle = pngle_new();
+	pngle_set_draw_callback(pngle, ds);
+	ret = pngle_feed(pngle, data, dataSz);
+	pngle_destroy(pngle);
+	
+	return ret;
+}
diff --git a/Src/pngDraw.c b/Src/pngDraw.c
index 62e8daa..c2493fa 100644
--- a/Src/pngDraw.c
+++ b/Src/pngDraw.c
@@ -1,12 +1,8 @@
 #include <PalmOS.h>
-#include "Src/pngle.h"
+#include <PceNativeCall.h>
+#include "pngDrawInt.h"
 #include "pngDraw.h"
 
-struct DrawState {
-    struct BitmapType *b;
-    uint16_t *bits;
-    uint16_t rowHalfwords;
-};
 
 static struct DrawState* setupDrawState(uint32_t w, uint32_t h) {
 	Err err;
@@ -59,18 +55,6 @@ static void finish(struct DrawState *ds, uint32_t x, uint32_t y)
 	MemPtrFree(ds);
 }
 
-void on_draw(pngle_t *pngle, uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint8_t rgba[4], struct DrawState *ds)
-{
-	UInt16 r = rgba[0] & 0xf8;
-	UInt16 g = rgba[1] & 0xfc;
-	UInt16 b = rgba[2] & 0xf8;
-	UInt16 color = (r << 8) + (g << 3) + (b >> 3);
-
-	UInt16 *dst = ds->bits + (UInt32)(UInt16)y * (UInt32)(UInt16)ds->rowHalfwords + x;
-
-	*dst = color;
-}
-
 void pngDrawStateFree(struct DrawState *ds)
 {
 	BmpDelete(ds->b);
@@ -82,23 +66,44 @@ void pngDrawRedraw(struct DrawState *ds, int16_t x, int16_t y)
 	WinDrawBitmap(ds->b, x, y);
 }
 
+int pngDrawDecodeCall(struct DrawState *ds, const void *data, uint32_t dataSz)
+{
+	UInt32 processorType, result;
+	int ret;
+	
+	if (errNone == FtrGet(sysFileCSystem, sysFtrNumProcessorID, &processorType)	&& sysFtrNumProcessorIsARM(processorType)) {
+		
+		MemHandle armH;
+	
+		struct ArmParams p = {
+			.ds = ds,
+			.data = data,
+			.dataSz = dataSz,
+		};
+		
+		ret = PceNativeCall((NativeFuncType*)MemHandleLock(armH = DmGetResource('armc', 1)), &p);
+		MemHandleUnlock(armH);
+		DmReleaseResource(armH);
+	}
+	else {
+		
+		ret = pngDrawDecode(ds, data, dataSz);
+	}
+	
+	return ret;
+}
+
 void pngDrawAt(struct DrawState **dsP, const void *data, uint32_t dataSz, int16_t x, int16_t y, uint32_t w, uint32_t h)
 {
 	struct DrawState *ds;
-	pngle_t *pngle;
 	int ret;
 	
 	// Start the PNG decoding and drawing to memory
 	ds = setupDrawState(64, 64);
 	ErrFatalDisplayIf(!ds, "Failed to setup DrawState!");
 
-	pngle = pngle_new();
-	pngle_set_draw_callback(pngle, ds);
-
-	ret = pngle_feed(pngle, data, dataSz);
+	ret = pngDrawDecodeCall(ds, data, dataSz);
 	ErrFatalDisplayIf(ret < 0, "Error feeding PNG data!");
-
-	pngle_destroy(pngle);
 	
 	pngDrawRedraw(ds, x, y);
 	
diff --git a/Src/pngDraw.h b/Src/pngDraw.h
index fe8ab98..f70f9e8 100644
--- a/Src/pngDraw.h
+++ b/Src/pngDraw.h
@@ -7,7 +7,6 @@
 struct BitmapType;
 struct DrawState;
 
-
 //decodes and stores state in "dsP"
 void pngDrawAt(struct DrawState **dsP, const void *data, uint32_t dataSz, int16_t x, int16_t y, uint32_t w, uint32_t h); 
 
@@ -17,4 +16,6 @@ void pngDrawStateFree(struct DrawState *ds);
 //redraw an already-decoded state
 void pngDrawRedraw(struct DrawState *ds, int16_t x, int16_t y);
 
+
+
 #endif
diff --git a/Src/pngDrawArm.c b/Src/pngDrawArm.c
new file mode 100644
index 0000000..4664ae9
--- /dev/null
+++ b/Src/pngDrawArm.c
@@ -0,0 +1,80 @@
+#include "Src/pngle.h"
+#include "pngDrawInt.h"
+#include "armcalls.h"
+
+
+
+void on_draw(pngle_t *pngle, uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint8_t rgba[4], struct DrawState *ds)
+{
+	uint_fast16_t r = rgba[0] & 0xf8;
+	uint_fast16_t g = rgba[1] & 0xfc;
+	uint_fast16_t b = rgba[2] & 0xf8;
+	uint_fast16_t color = (r << 8) + (g << 3) + (b >> 3);
+
+	uint16_t *dst = ds->bits + y * ds->rowHalfwords + x;
+
+	*dst = __builtin_bswap16(color);
+}
+
+static uint32_t read32(const void *fromP)
+{
+	const uint8_t *from = fromP;
+	uint32_t ret = 0;
+	
+	ret = (ret << 8) + from[0];
+	ret = (ret << 8) + from[1];
+	ret = (ret << 8) + from[2];
+	ret = (ret << 8) + from[3];
+	
+	return ret;
+}
+
+int __attribute__((used)) ArmletMain(void *emulStateP, struct ArmParams *pp, void *call68KFuncP)
+{
+	struct DrawState *ds68k;
+	struct DrawState dsArm;
+	pngle_t *pngle;
+	int ret;
+
+	armCallsInit(emulStateP, call68KFuncP);
+
+
+	ds68k = (struct DrawState*)read32(&pp->ds);
+	dsArm.b = (struct BitmapType*)read32(&ds68k->b);
+	dsArm.bits = (uint16_t*)read32(&ds68k->bits);
+	dsArm.rowHalfwords = __builtin_bswap16(ds68k->rowHalfwords);
+
+	pngle = pngle_new();
+	if (!pngle)
+		return -1;
+
+	pngle_set_draw_callback(pngle, &dsArm);
+
+
+	ret = pngle_feed(pngle, (const void*)read32(&pp->data), read32(&pp->dataSz));
+	
+	pngle_destroy(pngle);
+
+	return ret;
+}
+
+void __attribute((naked, used, section(".vector"), target("arm"))) __entry(void)
+{
+	//gcc will refuse to call a thumb functionj from this arm entry point no matter what we do
+	//so we are forced to do it ourselves if we want to compile for thumb (we do for space)
+	
+	asm volatile(
+		"1:									\n"
+		"	stmfd	sp!, {r10, r11, lr}		\n"
+		"	ldr		r10, =1b				\n"
+		"	adr		r11, 1b					\n"
+		"	ldr		r12, =ArmletMain		\n"
+		"	sub		r12, r10				\n"
+		"	add		r12, r11				\n"
+		"	mov		lr, pc					\n"
+		"	bx		r12						\n"
+		"	ldmfd	sp!, {r10, r11, lr}		\n"
+		"	bx		lr						\n"
+	);
+}
+
diff --git a/Src/pngDrawInt.h b/Src/pngDrawInt.h
new file mode 100644
index 0000000..6e103ec
--- /dev/null
+++ b/Src/pngDrawInt.h
@@ -0,0 +1,23 @@
+#ifndef _PNG_DRAW_INT_H_
+#define _PNG_DRAW_INT_H_
+
+#include <stdint.h>		//avoid PalmOS includes in ARM code
+
+struct BitmapType;
+
+struct DrawState {
+    struct BitmapType *b;
+    uint16_t *bits;
+    uint16_t rowHalfwords;
+};
+
+//68k entry
+int pngDrawDecode(struct DrawState *ds, const void *data, uint32_t dataSz);
+
+struct ArmParams {
+	struct DrawState *ds;
+	const void *data;
+	uint32_t dataSz;
+};
+
+#endif
diff --git a/Src/pngle.c b/Src/pngle.c
index b5f9fb6..c25f804 100644
--- a/Src/pngle.c
+++ b/Src/pngle.c
@@ -617,6 +617,7 @@ static int pngle_handle_chunk(pngle_t *pngle, const uint8_t *buf, size_t len)
 		//debug_printf("[pngle]       tinfl_decompress");
 		//debug_printf("[pngle]       => in_bytes %zd, out_bytes %zd, next_out %p, status %d", in_bytes, out_bytes, pngle->next_out, status);
 
+	#ifndef __ARM__
  		Char *CurrClass;
 
 		CurrClass = (Char *)MemPtrNew(sizeof(Char[85]));
@@ -626,7 +627,8 @@ static int pngle_handle_chunk(pngle_t *pngle, const uint8_t *buf, size_t len)
 		StrPrintF(CurrClass, "[pngle]       => in_bytes %ld, out_bytes %ld, next_out %ld, status %ld", in_bytes, out_bytes, pngle->next_out, status);
 		ErrNonFatalDisplay(CurrClass);
 		MemPtrFree(CurrClass);
-
+	#endif
+	
 		if (status < TINFL_STATUS_DONE) {
 			// Decompression failed.
 			debug_printf("[pngle] tinfl_decompress() failed with status %ld!\n", status);
@@ -887,7 +889,9 @@ int pngle_feed(pngle_t *pngle, const void *buf, size_t len)
 	while (pos < len) {
 		int r = pngle_feed_internal(pngle, (const uint8_t *)buf + pos, len - pos);
 		if (r < 0) {
+#ifndef __ARM__
             ErrDisplay(pngle->error);
+#endif
             return r; // error
         } 
 
@@ -940,4 +944,4 @@ void *pngle_get_user_data(pngle_t *pngle)
 	return pngle->user_data;
 }
 
-/* vim: set ts=4 sw=4 noexpandtab: */
\ No newline at end of file
+/* vim: set ts=4 sw=4 noexpandtab: */
diff --git a/Src/pngle.h b/Src/pngle.h
index 2b9c075..e700e2e 100644
--- a/Src/pngle.h
+++ b/Src/pngle.h
@@ -27,7 +27,7 @@
 
 #include <stdint.h>
 #include <stddef.h>
-#include <Src/Palmkedex.h>
+//#include <Src/Palmkedex.h>
 
 #ifdef __cplusplus
 extern "C" {
