ACI (Adequately Compressed Image) Format is an image compression format designed for low-colour-number sprites with a few major colours.
The format optionally supports a colour table (for colour images). Greyscale images do not provide a colour table and thus save space.
The file format is maximally smiple and optimized for adequate decoding speed on the m68k platform. The first four bytes in the file are width and height, in big-endian 16-bit format. Then comes a single flags/version byte. What follows depends on it. Currently only version 1 of the format is defined, which is designated by the bit #0 of the flags/version byte being set. If so, the other bits in the byte are as follows: Bit #1 - set if there is a colour table. Bit #2 - set if the image is framed (full rows and columns on some sides of a fixed color). Other bits reserved and must be clear. Next comes a byte (called numColoursM2) specifying how many colours the bitmap has. It is offset by one, thus a value of 7 means that this image has 8 colours. That is, the image is composed of (numColoursM2 + 1) colours. If the image is framed, now come 5 bytes to specify frame size in rows ans columnts. top, bottom, left, right, color index. The compresed image data is encoded as if those rows/colums do not exist - the decoder must fill them with that given color all by itself. If there is a colour table, it comes next, three bytes for each: R, G, and B. There are (numColoursM2 + 1) entries. The colours are sorted by the encoder from most common to least. This allows the decoder to give preference to more common colours when displaying the image, if the number of colours that can be displayed is limited. If there is not a colour table, the image is greyscale, and the proper grey scale (from full white to full black) will be created by the decoder to create the required number of colours. Next, come (numColoursM2 + 1) bytes that are "ranges" - they describe relative frequency of each colour (in colour table order) in the source image. There is an implied, but not written extra value, which would make these all add up to 256. The extra symbol is called "RLE marker" and means "same as last pixel". Then comes the data, arithmetically-coded based on the provided range widths.

The provided encoder/decoder is NOT meant for speed, but as a reference. It can be used to decompress an image into a 24-bit BMP easily, like so:
	./aci d < img.aci > img.bmp
It can be used to compress an image like so:
	./aci c < img.bmp > img.aci
The bitmap must be a 24-bits-per-pixel uncompressed bitmap, preferably with a low number of colours. This will produce an ACI image with a colourtable.
If you wish to produce a greyscale colour-table-less image, instead of "c", pass "c4", "c2", or "c1" parameters, for 4bpp, 2bpp, or 1bpp colour (16, 4, 2 colours). The format is not limited to this, but this tool, for ease, is. All incoming images will be converted to greyscale if not already so. The encoder will try both framed and not-framed mode to see which produces a smaller size.

The decoder in 68k assembly is optimised for speed in the common cases and is pretty fast. It provides the colour table in a callback at the start of the decoding process (even for greyscale images) and always outputs one byte per pixel.