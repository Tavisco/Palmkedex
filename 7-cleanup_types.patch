commit b1c05c54d65e19bb8aa83b83003c826eefd37819
Author: Dmitry Grinberg <dmitrygr@gmail.com>
Date:   Fri Dec 30 15:40:10 2022 -0600

    cleanup types

diff --git a/Src/Palmkedex.h b/Src/Palmkedex.h
index c0c327d..e2b7ae9 100644
--- a/Src/Palmkedex.h
+++ b/Src/Palmkedex.h
@@ -25,8 +25,6 @@
 #define ftrPkmnNamesNum (UInt16)1
 #define ftrShrdVarsNum (UInt16)2
 
-#define PKMN_QUANTITY    905
-#define UNKNOWN_TYPE     21
 
 #define QUADRUPLE_DAMAGE 400
 #define DOUBLE_DAMAGE    200
diff --git a/Src/PkmnMain.c b/Src/PkmnMain.c
index 3d2eb87..34bc428 100644
--- a/Src/PkmnMain.c
+++ b/Src/PkmnMain.c
@@ -128,7 +128,7 @@ static void DrawTypes(const struct PokeInfo *info)
 	MemHandle h;
 	BitmapPtr bitmapP;
 
-	h = DmGetResource(bitmapRsc, POKEMON_TYPE_IMAGES_BASE + info->type[0]);
+	h = DmGetResource(bitmapRsc, POKEMON_TYPE_IMAGES_BASE + (UInt8)info->type[0]);
 	ErrFatalDisplayIf(!h, "Failed to load type bmp");
 
 	bitmapP = (BitmapPtr)MemHandleLock(h);
@@ -138,9 +138,9 @@ static void DrawTypes(const struct PokeInfo *info)
 	MemPtrUnlock(bitmapP);
 	DmReleaseResource(h);
 
-	if (info->type[1] != 21)
+	if (info->type[1] != PokeTypeNone)
 	{
-		h = DmGetResource(bitmapRsc, POKEMON_TYPE_IMAGES_BASE + info->type[1]);
+		h = DmGetResource(bitmapRsc, POKEMON_TYPE_IMAGES_BASE + (UInt8)info->type[1]);
 		ErrFatalDisplayIf(!h, "Failed to load type bmp");
 
 		bitmapP = (BitmapPtr)MemHandleLock(h);
diff --git a/Src/PkmnType.c b/Src/PkmnType.c
index 500587b..de6d0c0 100644
--- a/Src/PkmnType.c
+++ b/Src/PkmnType.c
@@ -56,7 +56,7 @@ static UInt16 CalculateEffectivenessForType(const struct PokeInfo *info, UInt16
 	return (firstTypeDmg * secondTypeDmg) / 100;
 }
 
-static void DrawEffectiveness(UInt16 selectedPkmnID, UInt8 x, UInt8 y, UInt8 typeNum)
+static void DrawEffectiveness(UInt16 selectedPkmnID, UInt8 x, UInt8 y, enum PokeType typeNum)
 {
 	UInt32 romVersion;
 	IndexedColorType prevColor = 0;
@@ -127,7 +127,7 @@ static void DrawTypeIcons(UInt16 selectedPkmnID)
     x = 1;
     y = 19;
 
-    for (i = 1; i < 19; i++)
+    for (i = PokeTypeFirst; i <= PokeTypeFairy; i++)
     {
         h = DmGetResource(bitmapRsc, POKEMON_TYPE_IMAGES_BASE + i);
         ErrFatalDisplayIf(!h, "Failed to load type bmp");
@@ -139,11 +139,11 @@ static void DrawTypeIcons(UInt16 selectedPkmnID)
         MemPtrUnlock (bitmapP);
         DmReleaseResource(h);
 
-        DrawEffectiveness(selectedPkmnID, x, y, i);
+        DrawEffectiveness(selectedPkmnID, x, y, (enum PokeType)i);
 
         y += 16;
 
-        if (i == 9)
+        if (i == PokeTypeFlying)
         {
             x = 90;
             y = 19;
diff --git a/Src/pokeInfo.c b/Src/pokeInfo.c
index 65591ec..cd70cc9 100644
--- a/Src/pokeInfo.c
+++ b/Src/pokeInfo.c
@@ -123,22 +123,10 @@ void pokeInfoGet(struct PokeInfo *info, UInt16 pokeID)
 		MemSet(info, sizeof(struct PokeInfo), 0);
 	else
 		*info = ps.info;
-	
-	//FOR NOW, adjust "none" type to 21, as existing code expects
-	if (info->type[0] == PokeTypeNone)
-		info->type[0] = PokeTypeNone21;
-	if (info->type[1] == PokeTypeNone)
-		info->type[1] = PokeTypeNone21;
-	
 }
 
 UInt8 pokeGetTypeEffectiveness(enum PokeType of, enum PokeType on)
 {
-	if (of == PokeTypeNone21)
-		of = PokeTypeNone;
-	if (on == PokeTypeNone21)
-		on = PokeTypeNone;
-	
 	return mTypeEffectiveness[of][on] * 25;
 }
 
diff --git a/Src/pokeInfo.h b/Src/pokeInfo.h
index 6aa0fbc..18f839d 100644
--- a/Src/pokeInfo.h
+++ b/Src/pokeInfo.h
@@ -32,7 +32,9 @@ enum PokeType {
 	PokeTypeUnknown,
 	PokeTypeShadow,
 	PokeTypesCount,
-	PokeTypeNone21 = 21,	//used as second type for pokes that lack a first (BEFORE REFACTORING)
+	
+	PokeTypeFirst = PokeTypeNormal,
+	PokeTypeLast = PokeTypeShadow,
 };
 
 struct PokeInfo {	//must match provided resource data
