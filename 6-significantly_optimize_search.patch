commit bc9feea4709fe5179c94e3a52ee00075a1b8b078
Author: Dmitry Grinberg <dmitrygr@gmail.com>
Date:   Sun Jan 1 02:13:56 2023 -0600

    Significantly optimize search
    
    At app start we put all pokemon into one of 26 lists - a list of pokemon
    starting with that letter. That allows up to split the search from being
    among 900-ish pokemon to being among 80-ish, as the user types the first
    letter. Additionally, matching is not case-insensitive and MUCH faster.

diff --git a/Src/Main.c b/Src/Main.c
index 2a47d1a..9d96aa9 100644
--- a/Src/Main.c
+++ b/Src/Main.c
@@ -39,111 +39,74 @@ static void PokemonListDraw(Int16 itemNum, RectangleType *bounds, Char **sharedV
 	FntSetFont(prevFont);
 }
 
-static void ParseSearchString(Char *searchStr, Char charInserted)
+static Boolean myCaselessStringNcmp(const char *as, const char *bs, UInt16 len)
 {
-	Char *fieldStr;
-	FieldType *fldSearch = GetObjectPtr(MainSearchField);
-
-	fieldStr = FldGetTextPtr(fldSearch);
-
-	if (fieldStr != NULL)
-	{
-		if (charInserted == BACKSPACE_CHAR)
-		{
-			StrNCat(searchStr, fieldStr, StrLen(fieldStr)); // Copy N-1 char if backspace.
-		} else {
-			StrCat(searchStr, fieldStr);		
-		}
-	}
-	
-	// And, the inputed char, if it's not a backspace
-	if (charInserted != BACKSPACE_CHAR)
-	{
-		searchStr[StrLen(searchStr)] = charInserted;
-	}
-}
-
-static void PrepareMemoryForSearch(SharedVariables *sharedVars)
-{
-	if ((UInt32)sharedVars->filteredPkmnNumbers != 0)
-	{
-		MemPtrFree(sharedVars->filteredPkmnNumbers);
+	while (len--) {
+		
+		char ac = *as++;
+		char bc = *bs++;
+		
+		if (ac >= 'a' && ac <= 'z')
+			ac += 'A' - 'a';
+		if (bc >= 'a' && bc <= 'z')
+			bc += 'A' - 'a';
+		
+		if (ac != bc)
+			return false;
 	}
 	
-	sharedVars->filteredPkmnNumbers = (UInt16 *)MemPtrNew(sizeof(UInt16[MAX_SEARCH_RESULT_LEN]));
-	ErrFatalDisplayIf (((UInt32)sharedVars->filteredPkmnNumbers == 0), "Out of memory");
-	MemSet(sharedVars->filteredPkmnNumbers, sizeof(UInt16[MAX_SEARCH_RESULT_LEN]), 0);
-}
-
-static Boolean IsNameShorterThanQuery(const Char *pkmnName, UInt16 searchLen)
-{
-	return StrLen(pkmnName) < searchLen-1;
+	return true;
 }
 
-static Boolean NameMatchesQuery(const Char *pkmnName, const Char *searchStr, UInt16 searchLen)
+static void FilterDataSet(void)
 {
-	UInt16 i;
-
-	for (i = 0; i < searchLen; i++)
-	{			
-		if (searchStr[i] != pkmnName[i])
-		{
-			break;
-		}
-	}
-
-	// If the iterator have the same lenght
-	// as the search string, it means that all 
-	// the chars are equal, and thus, it's a match
-	return i == searchLen-1;
-}
-
-static void FilterDataSet(Char charInserted)
-{
-	UInt16 searchLen, matchCount, i;
+	const char *searchStr = FldGetTextPtr(GetObjectPtr(MainSearchField));
 	SharedVariables *sharedVars;
-	Char searchStr[MAX_PKMN_NAME_LEN+1] = "";
-	Char substringPkmnName[MAX_PKMN_NAME_LEN+1] = "";
-	Err err = errNone;
-
-	err = FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
-	ErrFatalDisplayIf (err != errNone, "Failed to load shared variables");
-
-	ParseSearchString(searchStr, charInserted);
-
-	if (StrLen(searchStr) == 0)
-	{
-		// If nothing is being searched, no need to filter :)
+	UInt16 i;
+	
+	FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
+	
+	if (!searchStr || !searchStr[0]) {	//no search
+		
 		sharedVars->sizeAfterFiltering = pokeGetNumber();
-		return;
 	}
-
-	PrepareMemoryForSearch(sharedVars);
-
-	searchLen = StrLen(searchStr)+1;
-	matchCount = 0;
-
-	for (i = 0; i < pokeGetNumber(); i++)
-	{
-		if (IsNameShorterThanQuery(pokeNameGet(i + 1), searchLen))
-		{
-			continue;
-		}
+	else {								//we have a search
 		
-		if (NameMatchesQuery(pokeNameGet(i + 1), searchStr, searchLen))
-		{
-			sharedVars->filteredPkmnNumbers[matchCount] = i + 1;
-			matchCount++;
+		UInt16 potentialPokeID;
+		char firstLetter;
+		
+		//find the first letter of the search, uppercase it, verify it IS a letter
+		firstLetter = searchStr[0];
+		if (firstLetter >= 'a' && firstLetter <= 'z')
+			firstLetter += 'A' - 'a';
+		
+		if (firstLetter < 'A' || firstLetter > 'Z') {	//not a letter - no pokemon names match!
+			
+			sharedVars->sizeAfterFiltering = 0;
 		}
-
-		if (matchCount == MAX_SEARCH_RESULT_LEN)
-		{
-			sharedVars->filteredPkmnNumbers[MAX_SEARCH_RESULT_LEN-1] = MAX_SEARCH_PKMN_NUM;
-			break;
+		else {
+			
+			const UInt16 *potentialMatches = sharedVars->pokeIdsPerEachStartingLetter[firstLetter - 'A'];
+			UInt16 L = StrLen(searchStr), matchCount = 0;
+			
+			//check each
+			for (i = 0; (potentialPokeID = potentialMatches[i]) != 0; i++) {
+				
+				if (myCaselessStringNcmp(pokeNameGet(potentialPokeID), searchStr, L)) {
+					
+					sharedVars->filteredPkmnNumbers[matchCount] = potentialPokeID;
+					matchCount++;
+		
+					if (matchCount == MAX_SEARCH_RESULT_LEN)
+					{
+						sharedVars->filteredPkmnNumbers[MAX_SEARCH_RESULT_LEN - 1] = MAX_SEARCH_PKMN_NUM;
+						break;
+					}
+				}
+			}
+			sharedVars->sizeAfterFiltering = matchCount;
 		}
 	}
-
-	sharedVars->sizeAfterFiltering = matchCount;
 }
 
 void OpenAboutDialog()
@@ -159,12 +122,12 @@ void OpenAboutDialog()
 	FrmDeleteForm (frmP);
 }
 
-static void UpdateList(Char charInserted)
+static void UpdateList(void)
 {
 	SharedVariables *sharedVars;
 	ListType *list;
 	
-	FilterDataSet(charInserted);
+	FilterDataSet();
 	FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
 
 	list = GetObjectPtr(MainSearchList);
@@ -214,7 +177,7 @@ void OpenMainPkmnForm(Int16 selection)
 		FrmGotoForm(PkmnMainForm);
 	} else {
 		FrmAlert (InvalidPokemonAlert);
-		UpdateList(NULL);
+		UpdateList();
 	}
 }
 
@@ -284,10 +247,8 @@ static Boolean MainFormDoCommand(UInt16 command)
 
 Boolean MainFormHandleEvent(EventType * eventP)
 {
-	Boolean handled = false;
-	FormType * frmP;
-	UInt16 focus;
-
+	FormPtr fp = FrmGetActiveForm();
+	
 	switch (eventP->eType) 
 	{
 		case menuEvent:
@@ -297,30 +258,35 @@ Boolean MainFormHandleEvent(EventType * eventP)
 			return MainFormDoCommand(eventP->data.menu.itemID);
 
 		case frmOpenEvent:
-			frmP = FrmGetActiveForm();
-			FrmDrawForm(frmP);
-			UpdateList(NULL);
-			handled = true;
-			break;
+			FrmDrawForm(fp);
+			UpdateList();
+			return true;
             
         case lstSelectEvent:
 			OpenMainPkmnForm(eventP->data.lstSelect.selection);
 			break;
 
 		case keyDownEvent:
-		{
-			focus = FrmGetFocus(FrmGetActiveForm());
-			if (focus != noFocus)
-			{
-				UpdateList(eventP->data.keyDown.chr);
+			//the key will change the field, but it has not yet done so
+			//the way it works is that the field will be told to handle
+			//the event if it is in focus, and it'l self update. It is
+			//a pain to try to wait for that, so we give the Field code
+			//the event now, and then update ourselves. It is important
+			//to mark the event as handled, to avoid the field getting
+			//it again.
+		
+			if (FrmGetFocus(fp) == FrmGetObjectIndex(fp, MainSearchField)) {
+				
+				FldHandleEvent(GetObjectPtr(MainSearchField), eventP);
+				UpdateList();
+				return true;
 			}
 			break;
-		}
-
+		
 		default:
 			break;
 	}
     
-	return handled;
+	return false;
 }
 
diff --git a/Src/Palmkedex.c b/Src/Palmkedex.c
index 78b33d8..8e30611 100644
--- a/Src/Palmkedex.c
+++ b/Src/Palmkedex.c
@@ -127,6 +127,55 @@ static void AppEventLoop(void)
 	} while (event.eType != appStopEvent);
 }
 
+static void makePokeFirstLetterLists(void)
+{
+	SharedVariables *sharedVars;
+	UInt16 i, counts[26] = {0};
+	
+	FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
+	
+	//count how many pokes start from each letter
+	for (i = 1; i <= pokeGetNumber(); i++) {
+		
+		char startingLetter = pokeNameGet(i)[0];
+		UInt8 arrIdx;
+		
+		//upper-case it
+		if (startingLetter >= 'a' && startingLetter <= 'z')
+			startingLetter += 'A' - 'a';
+		arrIdx = startingLetter - 'A';
+		
+		if (arrIdx >= 26)
+			continue;
+		
+		counts[arrIdx]++;
+	}
+	
+	//alloc memory and make the lists
+	for (i = 0; i < 26; i++)
+		sharedVars->pokeIdsPerEachStartingLetter[i] = MemPtrNew(sizeof(UInt16) * (counts[i] + 1));
+	
+	//populate pokemon into lists
+	MemSet(counts, sizeof(counts), 0);
+	for (i = 1; i <= pokeGetNumber(); i++) {
+		
+		char startingLetter = pokeNameGet(i)[0];
+		UInt8 arrIdx;
+		
+		//upper-case it
+		if (startingLetter >= 'a' && startingLetter <= 'z')
+			startingLetter += 'A' - 'a';
+		arrIdx = startingLetter - 'A';
+		
+		if (arrIdx >= 26)
+			continue;
+		sharedVars->pokeIdsPerEachStartingLetter[arrIdx][counts[arrIdx]++] = i;
+	}
+	
+	//terminate the lists
+	for (i = 0; i < 26; i++)
+		sharedVars->pokeIdsPerEachStartingLetter[i][counts[i]] = 0;
+}
 
 static void MakeSharedVariables()
 {
@@ -185,6 +234,7 @@ static Err AppStart(void)
 {
 	pokeInfoInit();
 	MakeSharedVariables();
+	makePokeFirstLetterLists();
 	SetColorDepth();
 
 	return errNone;
@@ -192,17 +242,17 @@ static Err AppStart(void)
 
 static void FreeSharedVariables()
 {
-	UInt32 pstSharedInt;
 	SharedVariables *sharedVars;
 	Err err = errNone;
+	UInt16 i;
 
-	err = FtrGet(appFileCreator, ftrShrdVarsNum, &pstSharedInt);
+	err = FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
 	ErrFatalDisplayIf (err != errNone, "Failed to load feature memory");
-	sharedVars = (SharedVariables *)pstSharedInt;
 
-	if ((UInt32)sharedVars->filteredPkmnNumbers != 0)
-	{
-		MemPtrFree(sharedVars->filteredPkmnNumbers);
+	for (i = 0; i < 26; i++) {
+		
+		if (sharedVars->pokeIdsPerEachStartingLetter[i])
+			MemPtrFree(sharedVars->pokeIdsPerEachStartingLetter[i]);
 	}
 
 	MemPtrFree(sharedVars);
diff --git a/Src/Palmkedex.h b/Src/Palmkedex.h
index c4a267c..ee57d41 100644
--- a/Src/Palmkedex.h
+++ b/Src/Palmkedex.h
@@ -46,9 +46,10 @@ typedef struct SpeciesName {
 typedef struct SharedVariables
 {
     UInt16 selectedPkmnId;
-    Char nameFilter[POKEMON_NAME_LEN + 1];   // The current filter
+    Char nameFilter[POKEMON_NAME_LEN + 1];  	 // The current filter
     UInt16 sizeAfterFiltering;
-    UInt16 *filteredPkmnNumbers;
+    UInt16 filteredPkmnNumbers[MAX_SEARCH_RESULT_LEN];
+    UInt16 *pokeIdsPerEachStartingLetter[26];	// A 0-terminated array of pokemon names fore each possible starting letter
 } SharedVariables;
 
 // Palmkedex.c
