commit 1654c7983319c38d6781cc82da0647a147b78a8c
Author: Dmitry Grinberg <dmitrygr@gmail.com>
Date:   Wed Jan 4 01:05:23 2023 -0600

    add some large screen support
    
    Support for:
     * AlphasmartDana (tall and wide)
     * Sony HiRes+ (tlal and wide)
     * PalmOS DIA (portrait & landscape)
     * Tapwave wide
     * Handera HVGA

diff --git a/Makefile b/Makefile
index 8affe92..0459c5c 100644
--- a/Makefile
+++ b/Makefile
@@ -14,7 +14,7 @@ ARMLTO			=	-flto
 ARMTYPE			=	-marm		#shoudl be -mthumb or -marm
 M68KCOMMON		=	$(COMMON) -Wno-multichar -funsafe-math-optimizations -Os -m68000 -mno-align-int -mpcrel -fpic -fshort-enums -mshort -fvisibility=hidden -Wno-attributes
 ARMCOMMON		=	$(COMMON) -Ofast -march=armv4t $(ARMTYPE) -mno-unaligned-access -ffixed-r9 -ffixed-r10 -ffixed-r11 -fomit-frame-pointer -D__ARM__ -ffreestanding -fpic -mthumb-interwork -Wno-attributes
-WARN			=	-Wsign-compare -Wextra -Wall -Wno-unused-parameter -Wno-old-style-declaration -Wno-unused-function -Wno-unused-variable -Wno-error=cpp -Wno-error=switch
+WARN			=	-Wsign-compare -Wextra -Wall -Wno-unused-parameter -Wno-old-style-declaration -Wno-unused-function -Wno-unused-variable -Wno-error=cpp -Wno-switch 
 LKR				=	Src/68k.lkr
 ARMLKR			=	src/arm.lkr
 CCFLAGS			=	$(LTO) $(WARN) $(M68KCOMMON) -I. -ffunction-sections -fdata-sections
@@ -33,7 +33,7 @@ SPRITECREATOR	=	PKSP
 SPRITETYPE		=	pSPR
 
 #add PalmOS SDK
-INCS			+=	-isystem "gccisms"
+INCS			+=	-I"gccisms"
 INCS			+=	-isystem "$(SDK)"
 INCS			+=	-isystem "$(SDK)/Core"
 INCS			+=	-isystem "$(SDK)/Core/Hardware"
@@ -49,6 +49,10 @@ INCS			+=	-isystem "$(SDK)/SonySDK/R5.0/Incs"
 INCS			+=	-isystem "$(SDK)/SonySDK/R5.0/Incs/System"
 INCS			+=	-isystem "$(SDK)/SonySDK/R5.0/Incs/Libraries"
 
+#add Handera SDK 1.05
+INCS			+=	-I "$(SDK)/Handera/include"
+
+
 #leave this alone
 OBJS-68k		=	$(patsubst %.S,%.68k.o,$(patsubst %.c,%.68k.o,$(SRCS-68k)))
 OBJS-arm		=	$(patsubst %.S,%.arm.o,$(patsubst %.c,%.arm.o,$(SRCS-arm)))
diff --git a/Src/Main.68k.o b/Src/Main.68k.o
new file mode 100644
index 0000000..7e0404b
Binary files /dev/null and b/Src/Main.68k.o differ
diff --git a/Src/Main.c b/Src/Main.c
index 557cae0..8054a45 100644
--- a/Src/Main.c
+++ b/Src/Main.c
@@ -3,6 +3,7 @@
 #include "Palmkedex.h"
 #include "pokeInfo.h"
 #include "UiResourceIDs.h"
+#include "myTrg.h"
 
 
 static void PokemonListDraw(Int16 itemNum, RectangleType *bounds, Char **sharedVarsPtr)
@@ -201,14 +202,9 @@ void OpenMainPkmnForm(Int16 selection)
 
 UInt16 GetPkmnId(Int16 selection)
 {
-	UInt32 pstSharedInt;
 	SharedVariables *sharedVars;
-	Err err = errNone;
-
-	err = FtrGet(appFileCreator, ftrShrdVarsNum, &pstSharedInt);
-	ErrFatalDisplayIf (err != errNone, "Failed to load shared variables");
-	sharedVars = (SharedVariables *)pstSharedInt;
 
+	FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
 	if (sharedVars->sizeAfterFiltering == pokeGetNumber())
 	{
 		return selection + 1;
@@ -245,6 +241,57 @@ static Boolean MainFormDoCommand(UInt16 command)
 	return handled;
 }
 
+static Boolean resizeMainForm(FormPtr fp)
+{
+	WinHandle wh = FrmGetWindowHandle(fp);
+	Coord newW, newH, oldW, oldH;
+	RectangleType rect;
+	UInt32 romVersion;
+	UInt16 idx, num;
+	
+	WinGetDisplayExtent(&newW, &newH);
+	wh = WinSetDrawWindow(wh);
+	WinGetDrawWindowBounds(&rect);
+	wh = WinSetDrawWindow(wh);
+	
+	if (rect.extent.x == newW && rect.extent.y == newH)
+		return false;
+	
+	oldW = rect.extent.x;
+	oldH = rect.extent.y;
+	rect.extent.x = newW;
+	rect.extent.y = newH;
+	WinSetBounds(wh, &rect);
+	(void)oldH;
+	(void)oldW;
+	
+	for (idx = 0, num = FrmGetNumberOfObjects(fp); idx < num; idx++) {
+		
+		FrmGetObjectBounds(fp, idx, &rect);
+		
+		//moving a GSI is hard
+		if (FrmGetObjectType(fp, idx) == frmGraffitiStateObj)
+			rect.topLeft.x += newW - oldW;
+		else switch (FrmGetObjectId(fp, idx)) {
+			case MainSearchField:
+				rect.extent.x += newW - oldW;
+				break;
+			
+			case MainSearchList:
+				rect.extent.x += newW - oldW;
+				rect.extent.y += newH - oldH;
+				break;
+			
+			default:
+				continue;
+		}
+		
+		FrmSetObjectBounds(fp, idx, &rect);
+	}
+	
+	return true;
+}
+
 /*
  * FUNCTION: MainFormHandleEvent
  *
@@ -266,6 +313,7 @@ static Boolean MainFormDoCommand(UInt16 command)
 Boolean MainFormHandleEvent(EventType * eventP)
 {
 	FormPtr fp = FrmGetActiveForm();
+	UInt32 pinsVersion;
 	
 	switch (eventP->eType) 
 	{
@@ -276,6 +324,14 @@ Boolean MainFormHandleEvent(EventType * eventP)
 			return MainFormDoCommand(eventP->data.menu.itemID);
 
 		case frmOpenEvent:
+			if (errNone == FtrGet(pinCreator, pinFtrAPIVersion, &pinsVersion) && pinsVersion) {
+				FrmSetDIAPolicyAttr(fp, frmDIAPolicyCustom);
+				WinSetConstraintsSize(FrmGetWindowHandle(fp), 160, 240, 640, 160, 240, 640);
+				PINSetInputTriggerState(pinInputTriggerEnabled);
+			}
+			if (isHanderaHiRes())
+				VgaFormModify(fp, vgaFormModify160To240);
+			resizeMainForm(fp);
 			calcPokemonNumberWidth();
 			FrmDrawForm(fp);
 			UpdateList();
@@ -302,6 +358,21 @@ Boolean MainFormHandleEvent(EventType * eventP)
 			}
 			break;
 		
+		case winEnterEvent:
+			if (isHanderaHiRes())
+				break;
+			//fallthrough except for handera
+			//fallthrough
+			
+		case displayExtentChangedEvent:
+		case winDisplayChangedEvent:
+		case frmUpdateEvent:
+			if (resizeMainForm(fp)) {
+				WinEraseWindow();
+				FrmDrawForm(fp);
+			}
+			return true;
+		
 		default:
 			break;
 	}
diff --git a/Src/Palmkedex.68k.o b/Src/Palmkedex.68k.o
new file mode 100644
index 0000000..60fff09
Binary files /dev/null and b/Src/Palmkedex.68k.o differ
diff --git a/Src/Palmkedex.c b/Src/Palmkedex.c
index 92503c1..5673a66 100644
--- a/Src/Palmkedex.c
+++ b/Src/Palmkedex.c
@@ -5,6 +5,7 @@
 #include "pokeInfo.h"
 #include "UiResourceIDs.h"
 #include "osPatches.h"
+#include "myTrg.h"
 
 
 /*********************************************************************
@@ -135,6 +136,9 @@ static void makePokeFirstLetterLists(void)
 	FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
 	
 	sharedVars->indexHandle = DmGet1Resource('INDX', 0);
+	
+	WinGetDisplayExtent(&sharedVars->prevDispW, &sharedVars->prevDispH);
+	
 	chains = MemHandleLock(sharedVars->indexHandle);
 	
 	//point each chain properly
@@ -235,6 +239,118 @@ static void AppStop(void)
 	pokeInfoDeinit();
 }
 
+static Boolean sysHasNotifMgr(void)
+{
+	UInt32 notifMgrVer;
+
+	return errNone == FtrGet(sysFtrCreator, sysFtrNumNotifyMgrVersion, &notifMgrVer) && notifMgrVer;	
+}
+
+static Err myDisplayChangedNotifHandler(SysNotifyParamType *notifyParamsP)
+{
+	SharedVariables *sharedVars = (SharedVariables*)notifyParamsP->userDataP;
+	Coord newW, newH;
+	EventType e;
+	
+	WinGetDisplayExtent(&newW, &newH);
+	if (newW != sharedVars->prevDispW || newH != sharedVars->prevDispH) {
+		
+		e.eType = winDisplayChangedEvent;
+		sharedVars->prevDispW = newW;
+		sharedVars->prevDispH = newH;
+		
+		EvtAddEventToQueue(&e);
+	}
+	
+	return errNone;
+}
+
+static Err subscribeToNotifs(void)
+{
+	SharedVariables *sharedVars;
+	UInt16 myCard;
+	LocalID myLID;
+	Err e;
+	
+	if (!sysHasNotifMgr())
+		return errNone;
+	
+	FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
+	
+	e = SysCurAppDatabase(&myCard, &myLID);
+		
+	if (e == errNone)
+		e = SysNotifyRegister(myCard, myLID, sysNotifyDisplayChangeEvent, myDisplayChangedNotifHandler, sysNotifyNormalPriority, sharedVars);
+	if (e == errNone)
+		e = SysNotifyRegister(myCard, myLID, sysNotifyDisplayResizedEvent, myDisplayChangedNotifHandler, sysNotifyNormalPriority, sharedVars);
+
+	return e;
+}
+
+static Err unsubFromNotifs(void)
+{
+	UInt16 myCard;
+	LocalID myLID;
+	Err e;
+	
+	if (!sysHasNotifMgr())
+		return errNone;
+	
+	e = SysCurAppDatabase(&myCard, &myLID);
+		
+	if (e == errNone)
+		e = SysNotifyUnregister(myCard, myLID, sysNotifyDisplayChangeEvent, sysNotifyNormalPriority);
+	if (e == errNone)
+		e = SysNotifyUnregister(myCard, myLID, sysNotifyDisplayResizedEvent, sysNotifyNormalPriority);
+	
+	
+	return e;
+}
+
+static void setupHandera(void)
+{
+	if (isHanderaHiRes())
+		VgaSetScreenMode(screenMode1To1, rotateModeNone);
+}
+
+static Err loadSonySilkLib(UInt16 * silkLibRefP, Boolean *useV2closeCallP)
+{
+	UInt32 romVersion, vskVersion;
+	Err e;
+	
+	*useV2closeCallP = false;
+	
+	//Library loading is broken on OS1, and no sony devices shipped with less than 3, so give up early
+	if (errNone != FtrGet(sysFtrCreator, sysFtrNumROMVersion, &romVersion) || romVersion < sysMakeROMVersion(3,0,0,sysROMStageDevelopment,0))
+		return sysErrLibNotFound;
+	
+	e = SysLibFind(sonySysLibNameSilk, silkLibRefP);	
+	if (e == sysErrLibNotFound)
+		e = SysLibLoad(sysFileTLibrary, sonySysFileCSilkLib, silkLibRefP);
+	
+	if (e != errNone)
+		return e;
+			
+	if (errNone != FtrGet(sonySysFtrCreator, sonySysFtrNumVskVersion, &vskVersion) || vskVersion == vskVersionNum1) {
+		
+		e = SilkLibOpen(*silkLibRefP);
+		if (e == errNone)
+			e = SilkLibEnableResize(*silkLibRefP);
+	}
+	else if (vskVersion == vskVersionNum2 || vskVersion == vskVersionNum3) {
+		
+		e = VskOpen(*silkLibRefP);
+		if (e == errNone) {
+			(void)VskSetState(*silkLibRefP, vskStateEnable, vskResizeVertically);
+			(void)VskSetState(*silkLibRefP, vskStateEnable, vskResizeHorizontally);
+		}
+		*useV2closeCallP = true;
+	}
+	
+	return e;
+}
+
+
 static Err loadSonyHrLib(UInt16 *hrLibRefP)
 {
 	UInt32 val320 = 320, romVersion;
@@ -275,7 +391,8 @@ UInt32 __attribute__((noinline)) PilotMain(UInt16 cmd, MemPtr cmdPBP, UInt16 lau
 
 	if (cmd == sysAppLaunchCmdNormalLaunch) {
 		
-		UInt16 sonyHrLibRef;
+		UInt16 sonyHrLibRef, sonySilkLib;
+		Boolean closeSilkLibUsingV2api;
 		
 
 		error = AppStart();
@@ -286,6 +403,14 @@ UInt32 __attribute__((noinline)) PilotMain(UInt16 cmd, MemPtr cmdPBP, UInt16 lau
 		if (error)
 			sonyHrLibRef = 0xffff;
 		
+		error = loadSonySilkLib(&sonySilkLib, &closeSilkLibUsingV2api);
+		if (error)
+			sonySilkLib = 0xffff;
+		
+		(void)subscribeToNotifs();
+		
+		setupHandera();
+		
 		osPatchesInstall();
 		
 		/* 
@@ -297,9 +422,18 @@ UInt32 __attribute__((noinline)) PilotMain(UInt16 cmd, MemPtr cmdPBP, UInt16 lau
 
 		osPatchesRemove();
 
-		if (sonyHrLibRef != 0xffff && errNone == HRClose(sonyHrLibRef))
-			SysLibRemove(sonyHrLibRef);
+		(void)unsubFromNotifs();
+
+		if (sonyHrLibRef != 0xffff)
+			HRClose(sonyHrLibRef);
 
+		if (sonySilkLib != 0xffff) {
+			if (closeSilkLibUsingV2api)
+				VskClose(sonySilkLib);
+			else
+				SilkLibClose(sonySilkLib);
+		}
+		
 		AppStop();
 	}
 
@@ -321,3 +455,11 @@ UInt32 __attribute__((section(".vectors"), used)) __Startup__(void)
 	return ret;
 }
 
+
+
+Boolean isHanderaHiRes(void)
+{
+	UInt32 handeraVersion;
+	
+	return errNone == FtrGet(TRGSysFtrID, TRGVgaFtrNum, &handeraVersion);
+}
\ No newline at end of file
diff --git a/Src/Palmkedex.h b/Src/Palmkedex.h
index d3fde0c..d18f92e 100644
--- a/Src/Palmkedex.h
+++ b/Src/Palmkedex.h
@@ -51,13 +51,16 @@ typedef struct SharedVariables
     UInt16 sizeAfterFiltering;
     UInt16 filteredPkmnNumbers[MAX_SEARCH_RESULT_LEN];
     
+    Coord prevDispW, prevDispH;
     
     MemHandle indexHandle;
     const UInt16 *pokeIdsPerEachStartingLetter[26];	// A 0-terminated array of pokemon names fore each possible starting letter
 } SharedVariables;
 
+
 // Palmkedex.c
 void *GetObjectPtr(UInt16 objectID);
+Boolean isHanderaHiRes(void);
 
 // Main.c
 Boolean MainFormHandleEvent(EventType *eventP);
@@ -81,4 +84,5 @@ Boolean PkmnTypeFormHandleEvent(EventType *eventP);
 // glue.c
 void BmpGlueGetDimensions(const BitmapType *bitmapP, Coord *widthP, Coord *heightP, UInt16 *rowBytesP);
 
+
 #endif /* PALMKEDEX_H_ */
\ No newline at end of file
diff --git a/Src/PkmnMain.68k.o b/Src/PkmnMain.68k.o
new file mode 100644
index 0000000..ec997aa
Binary files /dev/null and b/Src/PkmnMain.68k.o differ
diff --git a/Src/PkmnMain.c b/Src/PkmnMain.c
index 6b5a132..a9b16e1 100644
--- a/Src/PkmnMain.c
+++ b/Src/PkmnMain.c
@@ -5,9 +5,21 @@
 #include "pokeInfo.h"
 #include "imgDraw.h"
 #include "osExtra.h"
+#include "myTrg.h"
 
-#define POKE_IMAGE_AT_X		1
-#define POKE_IMAGE_AT_Y		16
+#define POKE_IMAGE_AT_X				1
+#define POKE_IMAGE_AT_Y				16
+
+#define POKE_TYPE_1_X				1
+#define POKE_TYPE_2_X				34
+#define POKE_TYPE_Y					82
+
+#define POKE_IMAGE_AT_X_HANDERA		1
+#define POKE_IMAGE_AT_Y_HANDERA		24
+
+#define POKE_TYPE_1_X_HANDERA		1
+#define POKE_TYPE_2_X_HANDERA		51
+#define POKE_TYPE_Y_HANDERA			123
 
 
 static const char emptyString[1] = {0};	//needed for PalmOS under 4.0 as we cannot pass NULL to FldSetTextPtr
@@ -15,6 +27,7 @@ static const char emptyString[1] = {0};	//needed for PalmOS under 4.0 as we cann
 static void DrawTypes(const struct PokeInfo *info);
 
 
+
 static void DrawPkmnPlaceholder(void)
 {
 	MemHandle h;
@@ -24,11 +37,22 @@ static void DrawPkmnPlaceholder(void)
 	bitmapP = (BitmapPtr)MemHandleLock(h);
 	ErrFatalDisplayIf(!bitmapP, "Failed to lock placeholder bmp");
 
-	WinDrawBitmap(bitmapP, POKE_IMAGE_AT_X, POKE_IMAGE_AT_Y);
+	if (isHanderaHiRes())
+		WinDrawBitmap(bitmapP, POKE_IMAGE_AT_X_HANDERA, POKE_IMAGE_AT_Y_HANDERA);
+	else
+		WinDrawBitmap(bitmapP, POKE_IMAGE_AT_X, POKE_IMAGE_AT_Y);
 	MemPtrUnlock(bitmapP);
 	DmReleaseResource(h);
 }
 
+static void redrawDecodedSprite(struct DrawState *ds)
+{
+	if (isHanderaHiRes())
+		imgDrawRedraw(ds, POKE_IMAGE_AT_X_HANDERA, POKE_IMAGE_AT_Y_HANDERA);
+	else
+		imgDrawRedraw(ds, POKE_IMAGE_AT_X, POKE_IMAGE_AT_Y);
+}
+
 static void DrawPkmnSprite(UInt16 selectedPkmnId)
 {
 	MemHandle imgMemHandle;
@@ -46,7 +70,7 @@ static void DrawPkmnSprite(UInt16 selectedPkmnId)
 	if (error == errNone && ds)
 	{
 		// If it is, draw it and return
-		imgDrawRedraw(ds, POKE_IMAGE_AT_X, POKE_IMAGE_AT_Y);
+		redrawDecodedSprite(ds);
 		return;
 	}
 
@@ -55,7 +79,7 @@ static void DrawPkmnSprite(UInt16 selectedPkmnId)
 	if (imgMemHandle) {
 		
 		if (imgDecode(&ds, MemHandleLock(imgMemHandle), MemHandleSize(imgMemHandle), 64, 64, 0))
-			imgDrawRedraw(ds, POKE_IMAGE_AT_X, POKE_IMAGE_AT_Y);
+			redrawDecodedSprite(ds);
 		else
 			ds = NULL;
 		MemHandleUnlock(imgMemHandle);
@@ -68,16 +92,27 @@ static void DrawPkmnSprite(UInt16 selectedPkmnId)
 		DrawPkmnPlaceholder();
 }
 
+static void drawFormCustomThings(void)
+{
+	SharedVariables *sharedVars;
+	struct PokeInfo info;
+	
+	FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
+
+	pokeInfoGet(&info, sharedVars->selectedPkmnId);
+	
+	DrawTypes(&info);
+	DrawPkmnSprite(sharedVars->selectedPkmnId);
+}
+
 void LoadPkmnStats(void)
 {
 	SharedVariables *sharedVars;
 	struct PokeInfo info;
 	FormType *frm;
 	ListType *list;
-	Err err;
 
-	err = FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
-	ErrFatalDisplayIf(err != errNone, "Failed to load feature memory");
+	FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
 
 	pokeInfoGet(&info, sharedVars->selectedPkmnId);
 
@@ -89,7 +124,6 @@ void LoadPkmnStats(void)
 	SetLabelInfo(PkmnMainSPAtkValueLabel, info.spAtk, frm);
 	SetLabelInfo(PkmnMainSPDefValueLabel, info.spDef, frm);
 	SetLabelInfo(PkmnMainSpeedValueLabel, info.speed, frm);
-	DrawTypes(&info);
 
 	list = GetObjectPtr(PkmnMainPopUpList);
 	LstSetSelection(list, 0);
@@ -125,16 +159,19 @@ static void FreeDescriptionField(void)
 
 static void DrawTypes(const struct PokeInfo *info)
 {
-	MemHandle h;
+	const UInt16 x1 = isHanderaHiRes() ? POKE_TYPE_1_X_HANDERA : POKE_TYPE_1_X;
+	const UInt16 x2 = isHanderaHiRes() ? POKE_TYPE_2_X_HANDERA : POKE_TYPE_2_X;
+	const UInt16 y = isHanderaHiRes() ? POKE_TYPE_Y_HANDERA : POKE_TYPE_Y;
 	BitmapPtr bitmapP;
-
+	MemHandle h;
+	
 	h = DmGetResource(bitmapRsc, POKEMON_TYPE_IMAGES_BASE + (UInt8)info->type[0]);
 	ErrFatalDisplayIf(!h, "Failed to load type bmp");
 
 	bitmapP = (BitmapPtr)MemHandleLock(h);
 	ErrFatalDisplayIf(!bitmapP, "Failed to lock type bmp");
 
-	WinDrawBitmap(bitmapP, 1, 82);
+	WinDrawBitmap(bitmapP, x1, y);
 	MemPtrUnlock(bitmapP);
 	DmReleaseResource(h);
 
@@ -146,7 +183,7 @@ static void DrawTypes(const struct PokeInfo *info)
 		bitmapP = (BitmapPtr)MemHandleLock(h);
 		ErrFatalDisplayIf(!bitmapP, "Failed to lock type bmp");
 
-		WinDrawBitmap(bitmapP, 34, 82);
+		WinDrawBitmap(bitmapP, x2, y);
 		MemPtrUnlock(bitmapP);
 		DmReleaseResource(h);
 	}
@@ -366,6 +403,59 @@ static void drawMagicandTrackPenRelease(Int16 x, Int16 y)
 		MemPtrFree(newSSA);
 }
 
+static Boolean resizePkmnMainForm(FormPtr fp)
+{
+	WinHandle wh = FrmGetWindowHandle(fp);
+	Coord newW, newH, oldW, oldH;
+	FieldPtr field = NULL;
+	RectangleType rect;
+	UInt32 romVersion;
+	UInt16 idx, num;
+	
+	WinGetDisplayExtent(&newW, &newH);
+	wh = WinSetDrawWindow(wh);
+	WinGetDrawWindowBounds(&rect);
+	wh = WinSetDrawWindow(wh);
+	
+	if (rect.extent.x == newW && rect.extent.y == newH)
+		return false;
+	
+	oldW = rect.extent.x;
+	oldH = rect.extent.y;
+	rect.extent.x = newW;
+	rect.extent.y = newH;
+	WinSetBounds(wh, &rect);
+	(void)oldH;
+	(void)oldW;
+	
+	for (idx = 0, num = FrmGetNumberOfObjects(fp); idx < num; idx++) {
+		
+		FrmGetObjectBounds(fp, idx, &rect);
+		
+		switch (FrmGetObjectId(fp, idx)) {
+			case PkmnMainBackButton:
+			case PkmnMainPopUpList:
+			case PkmnMainPopUpTrigger:
+				rect.topLeft.x += newW - oldW;
+				break;
+			
+			case PkmnMainDescField:
+				rect.extent.x += newW - oldW;
+				rect.extent.y += newH - oldH;
+				field = FrmGetObjectPtr(fp, idx);
+				break;
+			
+			default:
+				continue;
+		}
+		
+		FrmSetObjectBounds(fp, idx, &rect);
+	}
+	if (field)
+		FldRecalculateField(field, true /* we do not need the redraw but before PalmOs 4.0, without it, no recalculation takes place */);
+	return true;
+}
+
 /*
  * FUNCTION: PkmnMainFormHandleEvent
  *
@@ -386,8 +476,9 @@ static void drawMagicandTrackPenRelease(Int16 x, Int16 y)
 
 Boolean PkmnMainFormHandleEvent(EventType *eventP)
 {
+	FormType *frmP = FrmGetActiveForm();
 	Boolean handled = false;
-	FormType *frmP;
+	UInt32 pinsVersion;
 
 	switch (eventP->eType)
 	{
@@ -402,9 +493,17 @@ Boolean PkmnMainFormHandleEvent(EventType *eventP)
 		return PkmnMainFormDoCommand(eventP->data.menu.itemID);
 
 	case frmOpenEvent:
-		frmP = FrmGetActiveForm();
+		if (errNone == FtrGet(pinCreator, pinFtrAPIVersion, &pinsVersion) && pinsVersion) {
+			FrmSetDIAPolicyAttr(frmP, frmDIAPolicyCustom);
+			WinSetConstraintsSize(FrmGetWindowHandle(frmP), 160, 240, 640, 160, 240, 640);
+			PINSetInputTriggerState(pinInputTriggerEnabled);
+		}
+		if (isHanderaHiRes())
+			VgaFormModify(frmP, vgaFormModify160To240);
+		resizePkmnMainForm(frmP);
 		FrmDrawForm(frmP);
 		LoadPkmnStats();
+		drawFormCustomThings();
 		handled = true;
 		break;
 
@@ -434,6 +533,22 @@ Boolean PkmnMainFormHandleEvent(EventType *eventP)
 		FreeDescriptionField();
 		break;
 
+	case winEnterEvent:
+		if (isHanderaHiRes())
+			break;
+		//fallthrough except for handera
+		//fallthrough
+		
+	case displayExtentChangedEvent:
+	case winDisplayChangedEvent:
+	case frmUpdateEvent:
+		if (resizePkmnMainForm(frmP)) {
+			WinEraseWindow();
+			FrmDrawForm(frmP);
+			drawFormCustomThings();
+		}
+		return true;
+		
 	default:
 		break;
 	}
diff --git a/Src/PkmnType.68k.o b/Src/PkmnType.68k.o
new file mode 100644
index 0000000..2cde0c8
Binary files /dev/null and b/Src/PkmnType.68k.o differ
diff --git a/Src/PkmnType.c b/Src/PkmnType.c
index 75c16f4..8f991f1 100644
--- a/Src/PkmnType.c
+++ b/Src/PkmnType.c
@@ -3,6 +3,19 @@
 #include "Palmkedex.h"
 #include "pokeInfo.h"
 #include "UiResourceIDs.h"
+#include "myTrg.h"
+
+#define TYPES_START_X				1
+#define TYPES_START_Y				19
+#define TYPES_DX					89
+#define TYPES_DY					16
+
+#define TYPES_START_X_HANDERA		1
+#define TYPES_START_Y_HANDERA		29
+#define TYPES_DX_HANDERA			133
+#define TYPES_DY_HANDERA			24
+
+
 
 
 static RGBColorType GetRGBForEff(UInt16 damage)
@@ -117,15 +130,18 @@ static void DrawEffectiveness(UInt16 selectedPkmnID, UInt8 x, UInt8 y, enum Poke
 		WinSetTextColor(prevColor);
 }
 
+
+
 static void DrawTypeIcons(UInt16 selectedPkmnID)
 {
-    MemHandle 	h;
+    UInt16 x = isHanderaHiRes() ? TYPES_START_X_HANDERA : TYPES_START_X;
+	UInt16 y = isHanderaHiRes() ? TYPES_START_Y_HANDERA : TYPES_START_Y;
+	const UInt16 dx = isHanderaHiRes() ? TYPES_DX_HANDERA : TYPES_DX;
+	const UInt16 dy = isHanderaHiRes() ? TYPES_DY_HANDERA : TYPES_DY;
+	MemHandle 	h;
 	BitmapPtr 	bitmapP;
-    UInt8       i, x, y;
+    UInt8       i;
 
-    // Set start positions
-    x = 1;
-    y = 19;
 
     for (i = PokeTypeFirst; i <= PokeTypeFairy; i++)
     {
@@ -141,12 +157,12 @@ static void DrawTypeIcons(UInt16 selectedPkmnID)
 
         DrawEffectiveness(selectedPkmnID, x, y, (enum PokeType)i);
 
-        y += 16;
+        y += dy;
 
         if (i == PokeTypeFlying)
         {
-            x = 90;
-            y = 19;
+            x += dx;
+            y -= 9 * dy;
         }
     }
 }
@@ -157,15 +173,20 @@ static void SetMenuSelection(void)
 	LstSetSelection(list, 1);
 }
 
-static void InitializeForm(void)
+static void drawFormCustomThings(void)
 {
 	SharedVariables *sharedVars;
-	Err err = errNone;
+	
+	FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
+	
+	DrawTypeIcons(sharedVars->selectedPkmnId);
+}
 
-	err = FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
-	ErrFatalDisplayIf (err != errNone, "Failed to load feature memory");
+static void InitializeForm(void)
+{
+	SharedVariables *sharedVars;
 
-    DrawTypeIcons(sharedVars->selectedPkmnId);
+	FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
 
     SetMenuSelection();
     SetFormTitle(sharedVars);
@@ -202,10 +223,55 @@ static Boolean PkmnTypeFormDoCommand(UInt16 command)
 	return handled;
 }
 
+static Boolean resizePkmnTypeForm(FormPtr fp)
+{
+	WinHandle wh = FrmGetWindowHandle(fp);
+	Coord newW, newH, oldW, oldH;
+	RectangleType rect;
+	UInt32 romVersion;
+	UInt16 idx, num;
+	
+	WinGetDisplayExtent(&newW, &newH);
+	wh = WinSetDrawWindow(wh);
+	WinGetDrawWindowBounds(&rect);
+	wh = WinSetDrawWindow(wh);
+	
+	if (rect.extent.x == newW && rect.extent.y == newH)
+		return false;
+	
+	oldW = rect.extent.x;
+	oldH = rect.extent.y;
+	rect.extent.x = newW;
+	rect.extent.y = newH;
+	WinSetBounds(wh, &rect);
+	(void)oldH;
+	(void)oldW;
+	
+	for (idx = 0, num = FrmGetNumberOfObjects(fp); idx < num; idx++) {
+		
+		FrmGetObjectBounds(fp, idx, &rect);
+		
+		switch (FrmGetObjectId(fp, idx)) {
+			case PkmnTypePopUpList:
+			case PkmnTypePopUpTrigger:
+				rect.topLeft.x += newW - oldW;
+				break;
+			
+			default:
+				continue;
+		}
+		
+		FrmSetObjectBounds(fp, idx, &rect);
+	}
+	
+	return true;
+}
+
 Boolean PkmnTypeFormHandleEvent(EventType * eventP)
 {
+	FormType * frmP = FrmGetActiveForm();
 	Boolean handled = false;
-	FormType * frmP;
+	UInt32 pinsVersion;
 
 	switch (eventP->eType) 
 	{	
@@ -213,9 +279,17 @@ Boolean PkmnTypeFormHandleEvent(EventType * eventP)
 			return PkmnTypeFormDoCommand(eventP->data.menu.itemID);
 
 		case frmOpenEvent:
-			frmP = FrmGetActiveForm();
+			if (errNone == FtrGet(pinCreator, pinFtrAPIVersion, &pinsVersion) && pinsVersion) {
+				FrmSetDIAPolicyAttr(frmP, frmDIAPolicyCustom);
+				WinSetConstraintsSize(FrmGetWindowHandle(frmP), 160, 240, 640, 160, 240, 640);
+				PINSetInputTriggerState(pinInputTriggerEnabled);
+			}
+			if (isHanderaHiRes())
+				VgaFormModify(frmP, vgaFormModify160To240);
+			resizePkmnTypeForm(frmP);
 			FrmDrawForm(frmP);
             InitializeForm();
+            drawFormCustomThings();
 			handled = true;
 			break;
 
@@ -226,6 +300,22 @@ Boolean PkmnTypeFormHandleEvent(EventType * eventP)
 			}
 			break;
 
+		case winEnterEvent:
+			if (isHanderaHiRes())
+				break;
+			//fallthrough except for handera
+			//fallthrough
+			
+		case displayExtentChangedEvent:
+		case winDisplayChangedEvent:
+		case frmUpdateEvent:
+			if (resizePkmnTypeForm(frmP)) {
+				WinEraseWindow();
+				FrmDrawForm(frmP);
+				drawFormCustomThings();
+			}
+			return true;
+			
 		default:
 			break;
 	}
diff --git a/Src/UiResourceIDs.h b/Src/UiResourceIDs.h
index a6fdd2c..00246b3 100644
--- a/Src/UiResourceIDs.h
+++ b/Src/UiResourceIDs.h
@@ -14,10 +14,12 @@
 #define PkmnMainSPDefValueLabel		1111
 #define PkmnMainSpeedValueLabel		1113
 #define PkmnMainPopUpList			1120
+#define PkmnMainPopUpTrigger		1121
 #define PkmnMainDescField			1130
 
 #define PkmnTypeForm				1200
 #define PkmnTypePopUpList			1201
+#define PkmnTypePopUpTrigger		1202
 
 #define AboutForm					8000
 #define AboutOKButton				8001
diff --git a/Src/glue.68k.o b/Src/glue.68k.o
new file mode 100644
index 0000000..a59a066
Binary files /dev/null and b/Src/glue.68k.o differ
diff --git a/Src/helpers.68k.o b/Src/helpers.68k.o
new file mode 100644
index 0000000..e4285d2
Binary files /dev/null and b/Src/helpers.68k.o differ
diff --git a/Src/helpers.c b/Src/helpers.c
index cfa8857..a1aa83f 100644
--- a/Src/helpers.c
+++ b/Src/helpers.c
@@ -2,6 +2,8 @@
 #include <stdarg.h>
 #include <stdlib.h>
 #include <string.h>
+#include "Palmkedex.h"
+#include "myTrg.h"
 
 #ifndef __ARM__
 	static void debug_printf(const char* fmt, ...) {
diff --git a/Src/pokeInfo.68k.o b/Src/pokeInfo.68k.o
new file mode 100644
index 0000000..254ef4e
Binary files /dev/null and b/Src/pokeInfo.68k.o differ
diff --git a/gccisms/myTrg.h b/gccisms/myTrg.h
new file mode 100644
index 0000000..3c2ef11
--- /dev/null
+++ b/gccisms/myTrg.h
@@ -0,0 +1,41 @@
+#ifndef _MY_TRG_H_
+#define _MY_TRG_H_
+
+
+#define _TRG_H_	//to make sure stock isnt included
+
+
+
+#include "PalmTypes.h"
+
+#define TRGSysFtrID             'TRG '
+
+#ifdef __GNUC__
+
+#define _TRG_CALL_WITH_16BIT_SELECTOR(table, vector, selector)	__attribute__((__raw_inline__(0x343C, selector, 0x4E40 + table, vector)));
+
+#elif defined (__MWERKS__)	/* The equivalent in CodeWarrior syntax */
+
+#define _TRG_CALL_WITH_16BIT_SELECTOR(table, vector, selector) \
+    = { 0x343C, selector, 0x4E40 + table, vector }
+
+#endif
+
+#define TRG_TRAP(sel) \
+        _TRG_CALL_WITH_16BIT_SELECTOR(_SYSTEM_TABLE, sysTrapOEMDispatch, sel)
+
+#ifdef BUILDING_EXTENSION
+    #define EXT_TRAP(x)
+#else
+    #define EXT_TRAP(x) TRG_TRAP(x)
+#endif
+
+
+
+#include "Silk.h"
+#include "Vga.h"
+
+
+
+#endif
+
