diff --git a/.gitignore b/.gitignore
index 75d561e..e23f04d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -13,3 +13,4 @@ Tavisco_Data/*.BIN
 *.bak
 Tavisco_Data
 *.elf
+Rsc/Palmkedex_Rsc.rcp.real.rcp
diff --git a/Makefile b/Makefile
index 0459c5c..b9fb601 100644
--- a/Makefile
+++ b/Makefile
@@ -9,12 +9,12 @@ ARMCC			=	$(ARMTOOLCHAIN)gcc
 ARMLD			=	$(ARMTOOLCHAIN)gcc
 ARMOBJCOPY		=	$(ARMTOOLCHAIN)objcopy
 COMMON			=	-Wmissing-prototypes -Wstrict-prototypes -Wall -Wextra -Werror
-LTO				=	#-flto
+LTO				=	-flto
 ARMLTO			=	-flto
 ARMTYPE			=	-marm		#shoudl be -mthumb or -marm
 M68KCOMMON		=	$(COMMON) -Wno-multichar -funsafe-math-optimizations -Os -m68000 -mno-align-int -mpcrel -fpic -fshort-enums -mshort -fvisibility=hidden -Wno-attributes
 ARMCOMMON		=	$(COMMON) -Ofast -march=armv4t $(ARMTYPE) -mno-unaligned-access -ffixed-r9 -ffixed-r10 -ffixed-r11 -fomit-frame-pointer -D__ARM__ -ffreestanding -fpic -mthumb-interwork -Wno-attributes
-WARN			=	-Wsign-compare -Wextra -Wall -Wno-unused-parameter -Wno-old-style-declaration -Wno-unused-function -Wno-unused-variable -Wno-error=cpp -Wno-switch 
+WARN			=	-Wsign-compare -Wextra -Wall -Wno-unused-parameter -Wno-old-style-declaration -Wno-unused-function -Wno-unused-variable -Wno-error=cpp -Wno-switch  -Wno-implicit-fallthrough
 LKR				=	Src/68k.lkr
 ARMLKR			=	src/arm.lkr
 CCFLAGS			=	$(LTO) $(WARN) $(M68KCOMMON) -I. -ffunction-sections -fdata-sections
@@ -60,8 +60,12 @@ all: $(TARGET).prc $(TARGETSPRITES).prc
 HFILES			=	$(wildcard Src/*.h)
 
 
-$(TARGET).prc: code0001.68k.bin armc0001.arm.bin $(RCP)
-	$(PILRC) -ro -o $(TARGET).prc -creator $(CREATOR) -type $(TYPE) -name $(TARGET) $(RCP)
+$(TARGET).prc: code0001.68k.bin armc0001.arm.bin $(RCP).real.rcp
+	$(PILRC) -ro -o $(TARGET).prc -creator $(CREATOR) -type $(TYPE) -name $(TARGET) $(RCP).real.rcp
+
+%.rcp.real.rcp: %.rcp Makefile $(HFILES)
+	#PilRC's macro abilities are pitiful, so we call upon CPP :)
+	cpp -o $@ $< -ISrc -I. -P
 
 %.68k.bin: %.68k.elf
 	$(OBJCOPY) -O binary $< $@ -j.vec -j.text -j.rodata
diff --git a/Rsc/Palmkedex_Rsc.rcp b/Rsc/Palmkedex_Rsc.rcp
index 6935d8d..21e725c 100644
--- a/Rsc/Palmkedex_Rsc.rcp
+++ b/Rsc/Palmkedex_Rsc.rcp
@@ -2,9 +2,14 @@
 //
 // PilRC-format resources for Palmkedex
 
+#include "BUILD_TYPE.h"
+
 // Use this for GCC
 DATA "code" ID 1 "code0001.68k.bin"
+
+#ifdef ARM_PROCESSOR_SUPPORT
 DATA "armc" ID 1 "armc0001.arm.bin"
+#endif
 
 // these next two resources are usually optional, except in PalmOS 1.0, where they are not...
 HEX "code" ID 0
@@ -26,44 +31,86 @@ HEX "data" ID 0
 	0x00 0x00 0x00 0x00		//offset to start of "initing"
 	0x00					//END of init data
 	
+#ifdef SCREEN_RESIZE_SUPPORT
+	//tell Dana that we support large screens
+	HEX "wTap" ID 1000
+		0x00 0x00 0x00 0x01
+#endif
 
-//tell Dana that we support large screens
-HEX "wTap" ID 1000
-	0x00 0x00 0x00 0x01
+#ifdef HANDERA_SUPPORT
+	//tell Handera we know about it
+	HEX "sKst" ID 1000
+		0x00 0x00 0x00 0x00
+#endif
 
-//tell Handera we know about it
-HEX "sKst" ID 1000
-	0x00 0x00 0x00 0x00
 
-// Use this for CodeWarrior
-//GENERATEHEADER "Rsc/Palmkedex_Rsc.h"
-
-APPLICATIONICONNAME ID 1000 "Palmkedex"
 VERSION ID 1 "1.2'"
 
-RESETAUTOID 1000
 
 BITMAPFAMILY ID 1001
 BEGIN
 	BITMAP "Rsc/tavisco-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/tavisco-2.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/tavisco-8.bmp" BPP 8 COMPRESS
+
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/tavisco-2.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/tavisco-8.bmp" BPP 8 COMPRESS
+	#endif
+
 END
 
-ICONFAMILYEX
+ICONFAMILYEX ID 1000
 BEGIN
     BITMAP "Rsc/icon-lg-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/icon-lg-4.bmp" BPP 4 COMPRESS
-    BITMAP "Rsc/icon-lg-8.bmp" BPP 8 TRANSPARENTINDEX 210 COMPRESS
-	BITMAP "Rsc/icon-lg-4-d144.bmp" BPP 4 COMPRESS DENSITY 2
-	BITMAP "Rsc/icon-lg-8-d144.bmp" BPP 8 TRANSPARENTINDEX 210 COMPRESS DENSITY 2
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/icon-lg-4.bmp" BPP 4 COMPRESS
+	    BITMAP "Rsc/icon-lg-8.bmp" BPP 8 TRANSPARENTINDEX 210 COMPRESS
+		#ifdef SUPPORT_PALM_HIGH_DENSITY
+			BITMAP "Rsc/icon-lg-1-d108.bmp" BPP 1 COMPRESS DENSITY 108
+			BITMAP "Rsc/icon-lg-4-d108.bmp" BPP 4 COMPRESS DENSITY 108
+			BITMAP "Rsc/icon-lg-8-d108.bmp" BPP 8 TRANSPARENTINDEX 210 COMPRESS DENSITY 108
+			BITMAP "Rsc/icon-lg-1-d144.bmp" BPP 1 COMPRESS DENSITY 144
+			BITMAP "Rsc/icon-lg-4-d144.bmp" BPP 4 COMPRESS DENSITY 144
+			BITMAP "Rsc/icon-lg-8-d144.bmp" BPP 8 TRANSPARENTINDEX 210 COMPRESS DENSITY 144
+		#endif
+	#endif
 END
 
+#if defined(HANDERA_SUPPORT)
+
+	ICONFAMILYEX ID 2000
+	BEGIN
+		BITMAP "Rsc/icon-lg-1-d108.bmp" BPP 1 COMPRESS
+		BITMAP "Rsc/icon-lg-4-d108.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/icon-lg-8-d108.bmp" BPP 8 TRANSPARENTINDEX 210 COMPRESS
+	END
+
+	ICONFAMILYEX ID 2001
+	BEGIN
+		BITMAP "Rsc/icon-sm-1-d108.bmp" BPP 1 COMPRESS
+		BITMAP "Rsc/icon-sm-4-d108.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/icon-sm-8-d108.bmp" BPP 8 TRANSPARENTINDEX 210 COMPRESS
+	END
+
+#endif
+
 SMALLICONFAMILYEX
 BEGIN
     BITMAP "Rsc/icon-sm-1.bmp"  BPP 1 COMPRESS
-	BITMAP "Rsc/icon-sm-4.bmp"  BPP 4 COMPRESS
-	BITMAP "Rsc/icon-sm-8.bmp"  BPP 8 TRANSPARENTINDEX 210 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/icon-sm-4.bmp"  BPP 4 COMPRESS
+		BITMAP "Rsc/icon-sm-8.bmp"  BPP 8 TRANSPARENTINDEX 210 COMPRESS
+		
+		#ifdef SUPPORT_PALM_HIGH_DENSITY
+			BITMAP "Rsc/icon-sm-1-d108.bmp" BPP 1 COMPRESS DENSITY 108
+			BITMAP "Rsc/icon-sm-4-d108.bmp" BPP 4 COMPRESS DENSITY 108
+			BITMAP "Rsc/icon-sm-8-d108.bmp" BPP 8 TRANSPARENTINDEX 210 COMPRESS DENSITY 108
+			
+			BITMAP "Rsc/icon-sm-1-d144.bmp" BPP 1 COMPRESS DENSITY 144
+			BITMAP "Rsc/icon-sm-4-d144.bmp" BPP 4 COMPRESS DENSITY 144
+			BITMAP "Rsc/icon-sm-8-d144.bmp" BPP 8 TRANSPARENTINDEX 210 COMPRESS DENSITY 144
+		#endif
+		
+	#endif
 END
 
 MENU ID 1000
@@ -152,260 +199,387 @@ END
 //   ██       ██    ██      ██           ██     ██   ██ ██  ██  ██ ██           ██ 
 //   ██       ██    ██      ███████ ███████     ██████  ██      ██ ██      ███████                                                                                
 
+
 BITMAP ID 9001
 BEGIN
 	BITMAP "Rsc/images/interface/normal-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/normal-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/normal-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/normal-8.bmp" BPP 8 COMPRESS
-	
-	BITMAP "Rsc/images/interface/NORMAL.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/NORMAL.MR.bmp" BPP 8 DENSITY 108 COMPRESS
-	
-	BITMAP "Rsc/images/interface/NORMAL.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/NORMAL.HR.bmp" BPP 8 DENSITY 144 COMPRESS
-	
 	
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/normal-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/normal-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/normal-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/NORMAL.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/NORMAL.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/NORMAL.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/NORMAL.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9002
 BEGIN
 	BITMAP "Rsc/images/interface/fire-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/fire-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/fire-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/fire-8.bmp" BPP 8 COMPRESS
 	
-	BITMAP "Rsc/images/interface/FIRE.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/FIRE.MR.bmp" BPP 8 DENSITY 108 COMPRESS
-	
-	BITMAP "Rsc/images/interface/FIRE.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/FIRE.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/fire-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/fire-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/fire-8.bmp" BPP 8 COMPRESS
+	
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/FIRE.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/FIRE.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/NORMAL.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/FIRE.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9003
 BEGIN
 	BITMAP "Rsc/images/interface/water-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/water-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/water-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/water-8.bmp" BPP 8 COMPRESS
-	
-	BITMAP "Rsc/images/interface/WATER.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/WATER.MR.bmp" BPP 8 DENSITY 108 COMPRESS
 	
-	BITMAP "Rsc/images/interface/WATER.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/WATER.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/water-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/water-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/water-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/WATER.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/WATER.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/WATER.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/WATER.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9004
 BEGIN
 	BITMAP "Rsc/images/interface/grass-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/grass-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/grass-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/grass-8.bmp" BPP 8 COMPRESS
 	
-	BITMAP "Rsc/images/interface/GRASS.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/GRASS.MR.bmp" BPP 8 DENSITY 108 COMPRESS
-	
-	BITMAP "Rsc/images/interface/GRASS.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/GRASS.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/grass-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/grass-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/grass-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/GRASS.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/GRASS.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/GRASS.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/GRASS.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9005
 BEGIN
 	BITMAP "Rsc/images/interface/electr-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/electr-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/electr-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/electr-8.bmp" BPP 8 COMPRESS
-	
-	BITMAP "Rsc/images/interface/ELECTRIC.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/ELECTRIC.MR.bmp" BPP 8 DENSITY 108 COMPRESS
 	
-	BITMAP "Rsc/images/interface/ELECTRIC.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/ELECTRIC.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/electr-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/electr-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/electr-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/ELECTRIC.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/ELECTRIC.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/ELECTRIC.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/ELECTRIC.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9006
 BEGIN
 	BITMAP "Rsc/images/interface/rock-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/rock-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/rock-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/rock-8.bmp" BPP 8 COMPRESS
-	
-	BITMAP "Rsc/images/interface/ROCK.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/ROCK.MR.bmp" BPP 8 DENSITY 108 COMPRESS
 	
-	BITMAP "Rsc/images/interface/ROCK.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/ROCK.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/rock-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/rock-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/rock-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/ROCK.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/ROCK.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/ROCK.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/ROCK.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9007
 BEGIN
 	BITMAP "Rsc/images/interface/ground-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/ground-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/ground-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/ground-8.bmp" BPP 8 COMPRESS
 	
-	BITMAP "Rsc/images/interface/GROUND.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/GROUND.MR.bmp" BPP 8 DENSITY 108 COMPRESS
-	
-	BITMAP "Rsc/images/interface/GROUND.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/GROUND.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/ground-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/ground-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/ground-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/GROUND.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/GROUND.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/GROUND.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/GROUND.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9008
 BEGIN
 	BITMAP "Rsc/images/interface/ice-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/ice-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/ice-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/ice-8.bmp" BPP 8 COMPRESS
-	
-	BITMAP "Rsc/images/interface/ICE.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/ICE.MR.bmp" BPP 8 DENSITY 108 COMPRESS
 	
-	BITMAP "Rsc/images/interface/ICE.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/ICE.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/ice-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/ice-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/ice-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/ICE.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/ICE.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/ICE.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/ICE.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9009
 BEGIN
 	BITMAP "Rsc/images/interface/flying-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/flying-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/flying-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/flying-8.bmp" BPP 8 COMPRESS
 	
-	BITMAP "Rsc/images/interface/FLYING.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/FLYING.MR.bmp" BPP 8 DENSITY 108 COMPRESS
-	
-	BITMAP "Rsc/images/interface/FLYING.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/FLYING.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/flying-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/flying-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/flying-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/FLYING.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/FLYING.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/FLYING.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/FLYING.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9010
 BEGIN
 	BITMAP "Rsc/images/interface/fight-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/fight-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/fight-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/fight-8.bmp" BPP 8 COMPRESS
-	
-	BITMAP "Rsc/images/interface/FIGHTING.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/FIGHTING.MR.bmp" BPP 8 DENSITY 108 COMPRESS
 	
-	BITMAP "Rsc/images/interface/FIGHTING.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/FIGHTING.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/fight-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/fight-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/fight-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/FIGHTING.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/FIGHTING.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/FIGHTING.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/FIGHTING.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9011
 BEGIN
 	BITMAP "Rsc/images/interface/ghost-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/ghost-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/ghost-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/ghost-8.bmp" BPP 8 COMPRESS
-	
-	BITMAP "Rsc/images/interface/GHOST.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/GHOST.MR.bmp" BPP 8 DENSITY 108 COMPRESS
 	
-	BITMAP "Rsc/images/interface/GHOST.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/GHOST.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/ghost-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/ghost-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/ghost-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/GHOST.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/GHOST.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/GHOST.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/GHOST.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9012
 BEGIN
 	BITMAP "Rsc/images/interface/bug-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/bug-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/bug-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/bug-8.bmp" BPP 8 COMPRESS
 	
-	BITMAP "Rsc/images/interface/BUG.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/BUG.MR.bmp" BPP 8 DENSITY 108 COMPRESS
-	
-	BITMAP "Rsc/images/interface/BUG.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/BUG.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/bug-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/bug-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/bug-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/BUG.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/BUG.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/BUG.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/BUG.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9013
 BEGIN
 	BITMAP "Rsc/images/interface/poison-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/poison-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/poison-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/poison-8.bmp" BPP 8 COMPRESS
-	
-	BITMAP "Rsc/images/interface/POISON.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/POISON.MR.bmp" BPP 8 DENSITY 108 COMPRESS
 	
-	BITMAP "Rsc/images/interface/POISON.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/POISON.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/poison-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/poison-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/poison-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/POISON.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/POISON.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/POISON.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/POISON.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9014
 BEGIN
 	BITMAP "Rsc/images/interface/psychc-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/psychc-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/psychc-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/psychc-8.bmp" BPP 8 COMPRESS
 	
-	BITMAP "Rsc/images/interface/PSYCHIC.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/PSYCHIC.MR.bmp" BPP 8 DENSITY 108 COMPRESS
-	
-	BITMAP "Rsc/images/interface/PSYCHIC.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/PSYCHIC.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/psychc-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/psychc-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/psychc-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/PSYCHIC.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/PSYCHIC.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/PSYCHIC.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/PSYCHIC.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9015
 BEGIN
 	BITMAP "Rsc/images/interface/steel-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/steel-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/steel-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/steel-8.bmp" BPP 8 COMPRESS
-	
-	BITMAP "Rsc/images/interface/STEEL.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/STEEL.MR.bmp" BPP 8 DENSITY 108 COMPRESS
 	
-	BITMAP "Rsc/images/interface/STEEL.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/STEEL.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/steel-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/steel-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/steel-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/STEEL.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/STEEL.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/STEEL.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/STEEL.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9016
 BEGIN
 	BITMAP "Rsc/images/interface/dark-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/dark-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/dark-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/dark-8.bmp" BPP 8 COMPRESS
-	
-	BITMAP "Rsc/images/interface/DARK.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/DARK.MR.bmp" BPP 8 DENSITY 108 COMPRESS
 	
-	BITMAP "Rsc/images/interface/DARK.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/DARK.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/dark-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/dark-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/dark-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/DARK.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/DARK.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/DARK.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/DARK.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9017
 BEGIN
 	BITMAP "Rsc/images/interface/dragon-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/dragon-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/dragon-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/dragon-8.bmp" BPP 8 COMPRESS
 	
-	BITMAP "Rsc/images/interface/DRAGON.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/DRAGON.MR.bmp" BPP 8 DENSITY 108 COMPRESS
-	
-	BITMAP "Rsc/images/interface/DRAGON.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/DRAGON.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/dragon-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/dragon-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/dragon-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/DRAGON.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/DRAGON.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/DRAGON.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/DRAGON.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
 BITMAP ID 9018
 BEGIN
 	BITMAP "Rsc/images/interface/fairy-1.bmp" BPP 1 COMPRESS
-	BITMAP "Rsc/images/interface/fairy-4.bmp" BPP 2 COMPRESS
-	BITMAP "Rsc/images/interface/fairy-4.bmp" BPP 4 COMPRESS
-	BITMAP "Rsc/images/interface/fairy-8.bmp" BPP 8 COMPRESS
-	
-	BITMAP "Rsc/images/interface/FAIRY.MR.bmp" BPP 4 DENSITY 108 COMPRESS
-	BITMAP "Rsc/images/interface/FAIRY.MR.bmp" BPP 8 DENSITY 108 COMPRESS
 	
-	BITMAP "Rsc/images/interface/FAIRY.HR.bmp" BPP 4 DENSITY 144 COMPRESS
-	BITMAP "Rsc/images/interface/FAIRY.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+		BITMAP "Rsc/images/interface/fairy-4.bmp" BPP 2 COMPRESS
+		BITMAP "Rsc/images/interface/fairy-4.bmp" BPP 4 COMPRESS
+		BITMAP "Rsc/images/interface/fairy-8.bmp" BPP 8 COMPRESS
+		
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/FAIRY.MR.bmp" BPP 4 DENSITY 108 COMPRESS
+			BITMAP "Rsc/images/interface/FAIRY.MR.bmp" BPP 8 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/interface/FAIRY.HR.bmp" BPP 4 DENSITY 144 COMPRESS
+			BITMAP "Rsc/images/interface/FAIRY.HR.bmp" BPP 8 DENSITY 144 COMPRESS
+		#endif
+	#endif
 END
 
+
+
 // ██████  ███████ ██   ██     ██████   █████  ████████  █████  
 // ██   ██ ██       ██ ██      ██   ██ ██   ██    ██    ██   ██ 
 // ██   ██ █████     ███       ██   ██ ███████    ██    ███████ 
@@ -415,9 +589,21 @@ END
 DATA "DESC" ID 0 "scripts/descriptions.bin"
 #include "Rsc/speciesInfo.rcp"
 
+
 BITMAP ID 1000
 BEGIN
-BITMAP "Rsc/images/pokemon/missingPokemon.bmp" BPP 1 COMPRESS
-BITMAP "Rsc/images/pokemon/missingPokemonMR.bmp" BPP 1 DENSITY 108 COMPRESS
-BITMAP "Rsc/images/pokemon/missingPokemonHR.bmp" BPP 1 DENSITY 144 COMPRESS
+	BITMAP "Rsc/images/pokemon/missingPokemon.bmp" BPP 1 COMPRESS
+	#ifdef MORE_THAN_1BPP_SUPPORT
+	
+		#if defined(HANDERA_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/pokemon/missingPokemonMR.bmp" BPP 1 DENSITY 108 COMPRESS
+		#endif
+		
+		#if defined(SONY_HIRES_SUPPORT) || defined(SUPPORT_PALM_HIGH_DENSITY)
+			BITMAP "Rsc/images/pokemon/missingPokemonHR.bmp" BPP 1 DENSITY 144 COMPRESS
+		#endif
+		
+	#endif
 END
+
+
diff --git a/Rsc/icon-lg-1-d108.bmp b/Rsc/icon-lg-1-d108.bmp
new file mode 100644
index 0000000000000000000000000000000000000000..16b5477f45d23e2e402a4c6f61ead5f5e01a82e6
GIT binary patch
literal 3356
zcmd^7IZ^~M3^Xy25D}1&@d6$|&i{YFH(1%dBex}uEQ%sorpj6!eaNo;_<VV6<9nC*
zCg=5f?%MO{e?7GJbdNI{62AZb`)?k{(=NZoXWqQkB6(iqW|;?ThALYCSg}Wue3c+{
zyo&ECr6^%wfnd-YCd~A?XGsUk`H_7q#&P}|o5jP3N*OE#(1?C29V5~^jN>uq9)qby
z4_G=&F&0;*x6zIyLOeras><^ohQKAz=s?;>#bYETSiPK?qK+LEtrK+e$Y6*E9=Swi
z3L6-7{LIFrB2mGJ*i@d`amk8Aj=A}J;QD&a<w4hf+K(QpgXQQK8ej^`V&wgV9(Wi8
zZ_o+5I|%@oNz@Dp5C&9{1_pGiY3dLP%WVt|x?tk56~#il7AQtD@bH|i8Ez07bT#A2
or81Ggn<E35X!6Vhax8R~8&OkkJQN+O>oiZQ9=S?By%~?zE(LJPMgRZ+

literal 0
HcmV?d00001

diff --git a/Rsc/icon-lg-1-d144.bmp b/Rsc/icon-lg-1-d144.bmp
new file mode 100644
index 0000000000000000000000000000000000000000..5f7a7b2ee15a81cb371dd0c69a790416e1f8267f
GIT binary patch
literal 5864
zcmeH}F;2xm3`9dsM}as31vLkt=dzrNTY$;HXt3AbO)MmeeCaQf@%Y(VBE-w<`~9|m
zp6z_J@6-49W_#HEH>=;>;=3Dmd|aRF2HH39^EUaPZSWl6N9NCS*71a!mH`%HS$pOy
zHp@i+Tvz0nL)5T3HJk1I1+ZafjbSfM6VppzfL(M}MC_vD#0t$a>{`sTMe~3}hj0}d
zqmBfYqKM(>piActwS#9I7qdrADmhDPCe!Fua-`8=EYg^vh?&~4M)C=XqJU&!ko7De
z%^j>=*B}l4@I)q_%5i!aCOlT*=nZ5#_PWu0bjb+RK&-AfBygw`2&|ww8BTH2@u*9h
z?hLAX0WWr_+xyk)9&m^M{~p|)fAm@wFQhHN9U$EKRo?&Lch343u}}E*&xYOus?0Rk
zP})#q)og+08o&<cs)-%U$<|Q+kS1BjWtw3ffv`G<G@02@=Oce;gb|9o0^O|QQM(Fw
zJsMR-6%&Ug?LEDQLWWbOrV>u9q3zRIMSvU#OD-<M#sYq*L?A`B3<D+(jaUpTzt)Su
RPAprX!@PR08^8^0+b2N{sEhyr

literal 0
HcmV?d00001

diff --git a/Rsc/icon-lg-4-d108.bmp b/Rsc/icon-lg-4-d108.bmp
new file mode 100644
index 0000000000000000000000000000000000000000..e69cd236aea783e66f40282ecf49fa8a04d05438
GIT binary patch
literal 3356
zcmd^;J5B^K5JXK3Bt!%xWaLO308Pqy_6l<a?!*;Hxdzm@aM5n}*cR*x30fL&`&ZA^
z_C7w{T&5fkXz%ddetu`^I*-3yq;z%8FAt!3KYjc+Mk#IeJ6YyItt9yzg=YJ(9)l7T
ze~E%qT-L$FjG?+E4oLw+01Dlku+lCEY0ps1zy<-<b!8op0OzD_mzcI_o`JK3fS+J0
z2F>bdICXm{Q@PkvTQSeDCWZ|0bSxxo#XJLxv=fOg!`A9x!Y&pGR%`*jI+(B<kVDF1
zc;`mHO0~DO5-_k8eihn`M1x2wLg{evvMkn0#lW0ZnaPWI^$XH58KI%$Gg{0^7!LER
z47_Mul)d)X5;K=CE6&6wTm4xKgZh|dGK1mU8Z%@C(!wL3WDsB<uJ^I^i<R&BXiWr+
z7BguAMnk|ZLvChD#5G}+0EijeXb!wF`^@%uT*fU~(>K+-a+5>SP@RH3238P*mU6Du
btUH|R4j5W3Ih$y<pUg7)D*f3%!$|1^=*>$9

literal 0
HcmV?d00001

diff --git a/Rsc/icon-lg-4-d144.bmp b/Rsc/icon-lg-4-d144.bmp
index 7ec0538d6c4980e727fb983caed5bcdfbccfd0ab..bc47b9694a867fa69f253782b1ad90de636fb5b4 100644
GIT binary patch
literal 5864
zcmeH|O-{o=428p*9Sg(}Sg?!40T5fx!&!O_&cQ*r1-#~^PmVpAaeh=GH6tZ>JobBE
zos_<P{5*EUdd2-2*UNa_bx%Y73+E5_yoLmBzsEWzuz3QPx5@wAEZi3Gmh=0z*76GH
zcA8nPY`IUl!^+C}yR>wQz;=~&(^*MTzvNuV2}bQ{LtiKbXcnAWDUwLUt0(sAwE*vC
zwGhtdTQCG5BV&FJ`@UyJ1(g6K5=?yhv4kyFmZnf+1p+c4AD3-pEQ}-r0njBW+6h1y
zaOX@S1~XDXFBX+E7<LGhB17!0jKWa?CeI)ME5Z-Eg@I~G3^G^%#QeNauo&3#=rb(W
zZnv4oQDmSO?!rJou;4#QSa-%vh6n&JE;{m|C`NEOKTW*D#=_JwECXbuub}9z)8OnA
znNg6T=q{sX;ElsRGl!;2vmn?`64zk><ivHlxhaOqD6TdKzBAK@Fz)IM_&3Oc=3AF6
zhzw1DIR^dw@uw#VfU><92*6(o#(9Q_k(omr1$+r0jMWTDfPcc^F!p*D`5|!NtjC>W
zC&r4GLGObEsh_;7Ythq>#rSGSDrs%Y)Ekxa8HrfsMX?m}rnXY;i%es&bP!nmdThI*
i=DLj4tiZUkbzb!@XHnVKb#^(ObKgb$5V`RQblo3N2L}lN

literal 5864
zcmeH{JyOIl4245YN5N22QBZRLdN@cfz#;YuoPsu|q2m_ekryknV=K1vGt6u>lSH=U
z_r6s!`}+2C-wg4B`xCC`@w#aqhW#(p?{0Yw8@TmnoD*0#fk!jeX)m8P&AsBXR(Xdu
z=*-Za<v#HfS`)eHKNa<<xNgZV)u8^J7ZXR<@ob4(*ekz<vUvz&*H$ECfGFWU{K!Ef
zN!>KWJq19V91Qf-k)#-)#+gv|-3)LNvVvg|Krl>%zhX5888~h25`MCMud8-WH7d__
zf*rQuj#Ghb(1~TxU@svk;&Umz!?viJd<^WzQra$lv~4S;Afdi?3~~d2Qi5Rs5T_a=
zV1Ul2i{R(Tl68L!k(EZWM<EP2f^h!RQ>>9pyDp1(t1W8cU=9PDqYTc?dMaBl71>M%
z%OkJm*{cOeav1VV7P^#em>$Le#L(NVuZ<x!iX-Px$AG_0LN0u8C1v*&j8A(A{NGM7
zuv%h1_Es=NM?ru(49$=;1iH*eaXbSYQy6RBMg9;{qo{D_5qTG-3|o;9pw9jOFsvlO
s5Y|k9?wWyW`CkS5w_+$I*~2|G6YVw6^{GAbxuf3M!|~L-stGjBFTBmkRR910

diff --git a/Rsc/icon-lg-8-d108.bmp b/Rsc/icon-lg-8-d108.bmp
new file mode 100644
index 0000000000000000000000000000000000000000..6222a41ed956656cef9240b43ea4582ae3ae81fe
GIT binary patch
literal 3356
zcmc(iF-`+95JiU$1!zb^kp_t(4J{IFDuhIlHYcEio`Oq6xj+uV0k{As2%_N%l;+#B
z9%k+Ft`lX0HM<O6`#=A&H-Xv1<cvbQ!F`JBvbm1vBJ_Ws5}lv$6*_PmyYa}4h70J^
zu{$P5!-dy}gW&*B_WHGqSliamiUL$HqU8H}okx7wRq8%Q&|vAGkFPxVQ9~+tDl_`j
zHLsggU_<~5&F6O#S~|%=G7S|Om>__+)yjp21h7O}|Jq>MMY9-0CSYew#t3d@X;?K&
z>$}vg<SD6`!O$jp8N!ogAxSD`Ffd4FB9YC|wYptwB=le*c`I>O+6;V-POtPF2x$!O
zxu_?JOiZlU3_p44BxEuY>GX+mBRLO#d3+WtDPwZ~+EP)ZV!uT~J@(453{9?|_RYvJ
z!!X*I|7GAr6X|WAeL9Zfh9`$2?7uc)eGe)ItK-$%0#nHlE0C6kyvoXA)0lvY{ho7g
zw6dFzq)=9^EKIG5rON?b45?UEiNen3RpN5BKTBc-{j<<;#`G~O@pxD>M~j5K%;2GY
zq;B;-AF`ZgdH%i0BR>2)MXamueLjSQ#B6#%A>W2kkkCsubI&-$-|dI^|AXiknR9~H

literal 0
HcmV?d00001

diff --git a/Rsc/icon-lg-8-d144.bmp b/Rsc/icon-lg-8-d144.bmp
index b38474bc539f0b38803d6d00daf7f5c20e666427..d6a96ece220babe3da2f1f7f2ba9ced011bcc980 100644
GIT binary patch
literal 5864
zcmeH|Jx;_x4245YM}as31vOGyN+g;s_goxdPrw~0DYs3{321|N96KJ5=Z{Guq)jvl
z9%uaCx1K?HdHcTa-1Q94N4TG+`=)zv`44!1cZ;`6Tpr^-_6{_6fRB?3HaK0%F)>{O
z#<%-Coy_5{YVJ1w5TVPyKVL&Q_$>sYsF{ScP(SoFGYmu34HzT=nx<Dei6o@)Ck!f<
z0EfdXk2C<jZNeY`HezcP@Pb4DB&1i<4Ob&&(Hhi7cR`?F<Wv@7JY(=tPX`VFs#r<^
zlwe>9D}Y)ZhG>HPb!aW0@@+Z>m<k302sNcU#^IWDrWC_5m{Oo1F<^?z`s1L6S&m63
zpF5dx1`uJ41c2lTVe$+CK>t4C2-Psd3#4@z%km6{V7TZI00&ZvlXDPkih{xN5(d+K
zHVVM>s~kxYL)Im`Ac?UN13<<xu8SewitYM<XU5u*3<G@2+@+6t_7KJv1PpnA7{ht&
zdBp6@{89|g9lsP4iD?&0`WQuh2wQQMUn<v-n4Osy45a}7gh62}v=<dk003fus_7qu
z4<rO;!xKrj7ZU*dLH)ufl~tQ6p5s7Dl>lZplz7>+31A6~1ps^u5G>!9*&U+7-On!b
eM58eNs^#1zp7w~(Wz|Y?%zP!gUG}Ov(ES3(c`4oi

literal 1174
zcmbu7u}i~H5XP_2Lc2AUQpdC)I5<c$WqU}bf}kzw;BE#t7h~yCaS6^MjW`yS_kTD#
zy7td-jd%CnB`L;1J$QXDzwf*6($^jxKQw{s3P1O89oW?XBe+&4Q`aunbzw3YLoj}V
z;A{hs0|fUu1RpuvE*9{%Uc=}62J#$*nhI+RpcaRJ=Za=GCAG+5TnfS!v{S65bXbmV
z!lfX*opG(wr5Rzkg4FO#1j{=*N#>@*G%#14$Co5YOv{Ref?w;@p_*4XWIDOiugnKo
zN>|2yNE}CN&D?Pk;R-IRd_dog{HlRY%GvS#As)My0|o5r8^`y3kIv{NKRCVU6d(Ij
z6sSdbZ!bcjA4M#9L*XOjrbzHc!V7FVJmKQTos(*KghBpqI0aSwv-8RuS*}{qERIF+
z{X@AQ<QLE1c?eOgb!>w;-roNYT(zn>6mR^<D|1U8q99|ZjEx_8aYb9aA{e{%hYD=R
j3H|6Y7k4WN7C#AGO)_Kg|B6p6H2Jv2g_ync|CfIOJQfwL

diff --git a/Rsc/icon-sm-1-d108.bmp b/Rsc/icon-sm-1-d108.bmp
new file mode 100644
index 0000000000000000000000000000000000000000..d60463d9bb1e739f53f93d239797330e832adc19
GIT binary patch
literal 1008
zcma)&!3{z&3`2`JB5~k=7=Z~GfIAB_6&rl~<HkyeR8pyF8r!d5|M~hHhph+d9s7!X
z#y*T2>KJe6mlL-QP`144B<ou>WQKG!Tt5I_A;o#PNl^nMNwHQ;X2`2&G^tJSh#Or&
z-^aK{RlR5ZoI<s866=x?jq9Emc+BSK{9v24dSE>3=T7be<g`YNI99&^m+w%BNY)O(
cf(jwQ&|iS%=Fi9sD#UaupDK(#Mt~Xl0`&SI6aWAK

literal 0
HcmV?d00001

diff --git a/Rsc/icon-sm-1-d144.bmp b/Rsc/icon-sm-1-d144.bmp
new file mode 100644
index 0000000000000000000000000000000000000000..684411ab7ef53731b3cf23fe359d632b678db2be
GIT binary patch
literal 1712
zcmb7>F%rTc5Jj=Eu}fuTofCKfdoSdvykY#|Pd@9y0%3-A`FXr$#@G9MO?f?0SL_G&
zf_+JM)RaE>zTCKTfU-@jgDt-km$s3cw%Qcsmh8GAux#D;f%vxW@rgRR2~iF#aO;Me
z%;NO7I0um%c;rD`90E#Ibz*GO8tHBdXO5!-l#683b=MjuwrUQ2w#IHN==Uez-Ivv0
zp-1ReJKJ9Z@NAuPOH6z?gusN`iHG{8I7{3xne2_>y8}rxMhM@Gl1x+5`Y#1$`}j{4
Z@0zX~Y@}E2eD*kUlcmX4>xlZD{{j3`kWl~t

literal 0
HcmV?d00001

diff --git a/Rsc/icon-sm-4-d108.bmp b/Rsc/icon-sm-4-d108.bmp
new file mode 100644
index 0000000000000000000000000000000000000000..cfa08db526dfd48c3104e6f162bee56528330af7
GIT binary patch
literal 1008
zcmcJO!41MN5Cn~QA|aUvq68|S0K}JPT1X4j;#R1EV(1_Y+1R?{%nw%bMZWBf){1k!
zKG$j1iF#!1SzFdB9jGbYdB59e%?--rm2)noJbI#!F!+hdGkDK1ma!_bBE~Q*03#&o
z#S1jl4~%DE(M(J05z7vnJyB)Qvv!-~Ry7QR^)!rU;9?pzueO!4JO%498bEWgS`y|S
zBM!xm#r&P2I}t;u)1rhNd`x<{bjR509z>ED4S=(Lmme`K=35A2k;8`YIoKhcC>}wb
K2w>#>_r3r)xlb4X

literal 0
HcmV?d00001

diff --git a/Rsc/icon-sm-4-d144.bmp b/Rsc/icon-sm-4-d144.bmp
new file mode 100644
index 0000000000000000000000000000000000000000..6b3b24d84da5cda0fe4d91529880ecd340918d7e
GIT binary patch
literal 1712
zcmd6ou?@m75Jf{nLq#eoYWheFfYMTC1y(>}6SiOwb_$RD*s(aD6AC20<co9hy??PB
z<#c|mt3gNNfw5=Qj8(NGR@IH?^+sbz5c&n$8Z9X5=h%YYjg&7t6xjfPK68>83krCj
zO&w55FG1D=hXUSVr(gg$5SylHgP3E9TLJI0DFp;0zIEVES2=jC=h&=GTTJ`D26bIG
zS+s2y@35((8Y*HgE8PbAc$LXF><AXm#?*nu->@yrW>Wm$v2~_x)5^rw7x&GfV=dMC
zcDU6!whm%v!BpkW$&cA7-fNoIpl`2fzi*x(?Tp<DWy)a6ojn=QBR=au62)cN$sAin
NBBe14`$)e3J}*gGyo&$;

literal 0
HcmV?d00001

diff --git a/Rsc/icon-sm-8-d108.bmp b/Rsc/icon-sm-8-d108.bmp
new file mode 100644
index 0000000000000000000000000000000000000000..a535b7902fc8d202966047b342620cb4af8001cb
GIT binary patch
literal 1008
zcmcJOp$@_@5Qa;TBnSjSPVxjKwa6xz$-T-XuYjD~Q{a)v***gbTmJP*d)Ib~(A-^a
z*Sl~3w(fj+t(9LV#3OtU-@;ewfT+|R`@0RfFU-LSYntXUj_;=}4RshAvJuI^K1Q8$
z*S;sKl5$KE!2!4*NQiA~xB(1mu0}A>LK6Vc;((Z=O-Kn0)M5(~u0wY=m>GCa!U%>o
zgT6Uf?4`?uA)bfT7!eTWJWS+K5E3&~8Rbw}VVM6jCZ}Pg2&#Og6gqJ9P@Ctb@KqNv
jo{<1J=Hh((%-~WMML=k0g$SX8{-p3k%P%7bc!v4_dL6g_

literal 0
HcmV?d00001

diff --git a/Rsc/icon-sm-8-d144.bmp b/Rsc/icon-sm-8-d144.bmp
new file mode 100644
index 0000000000000000000000000000000000000000..04282c3ce45073a950f8d1cb1f0e3b4fec97d9bb
GIT binary patch
literal 680
zcmbV~Jr2S!4255R(xicj1E7vvA#2A<EQ}n0OE7W;Mn(oM!pO+lW3UE0#Yt2KB%b8N
z@%QXRYWwZ2M9_iO4aJ&bMNz=e3iQNRiz$|L=IFW(yWIdcT;TR2-~o5`a8HlZ@re8N
ziq~U=_XJ3Frcjtw5(Z3A-jn4p?IdH;h{Vxat@Xzd4Usc8))Xw=#tDh*qOjHmP7WC$
z91OU>s;ZLnk0J3=DJm;P2DZ#OVNo#5xj^38@CR=i8S>p<Lp9clA&#%*{XaPyq+QAD
b>eNrE+@9f_Q$9K3o%HGRoKLLuM@*GBc3>Rx

literal 0
HcmV?d00001

diff --git a/Src/BUILD_TYPE.h b/Src/BUILD_TYPE.h
new file mode 100644
index 0000000..c5a338e
--- /dev/null
+++ b/Src/BUILD_TYPE.h
@@ -0,0 +1,21 @@
+#ifndef _BUILD_TYPE_
+#define _BUILD_TYPE_
+
+//all off, last one on is a good PalmOs 1.0/2.0 minimal build
+//all on is a good everywhere build
+
+
+
+#define MORE_THAN_1BPP_SUPPORT
+#define SCREEN_RESIZE_SUPPORT
+#define HANDERA_SUPPORT
+#define SONY_HIRES_SUPPORT
+#define SONY_SILK_SUPPORT
+#define SUPPORT_PALM_HIGH_DENSITY
+#define ARM_PROCESSOR_SUPPORT
+#define MAGIC_FOR_EARLY_MONO_DEVICES
+
+
+
+#endif
+
diff --git a/Src/Main.c b/Src/Main.c
index ee16270..feff009 100644
--- a/Src/Main.c
+++ b/Src/Main.c
@@ -1,9 +1,12 @@
 #include <PalmOS.h>
 
+#include "BUILD_TYPE.h"
 #include "Palmkedex.h"
 #include "pokeInfo.h"
 #include "UiResourceIDs.h"
+#ifdef HANDERA_SUPPORT
 #include "myTrg.h"
+#endif
 
 
 static void PokemonListDraw(Int16 itemNum, RectangleType *bounds, Char **sharedVarsPtr)
@@ -118,8 +121,10 @@ void OpenAboutDialog()
 	
 	/* Display the About Box. */
 	frmP = FrmInitForm (AboutForm);
+#ifdef HANDERA_SUPPORT
 	if (isHanderaHiRes())
-			VgaFormModify(frmP, vgaFormModify160To240);
+		VgaFormModify(frmP, vgaFormModify160To240);
+#endif
 	FrmDoDialog (frmP);
 	FrmDeleteForm (frmP);
 }
@@ -143,13 +148,9 @@ static void UpdateList(void)
 
 Int16 GetCurrentListSize()
 {
-	UInt32 pstSharedInt;
 	SharedVariables *sharedVars;
-	Err err = errNone;
 
-	err = FtrGet(appFileCreator, ftrShrdVarsNum, &pstSharedInt);
-	ErrFatalDisplayIf (err != errNone, "Failed to load shared variables");
-	sharedVars = (SharedVariables *)pstSharedInt;
+	FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
 
 	return sharedVars->sizeAfterFiltering;
 }
@@ -245,6 +246,7 @@ static Boolean MainFormDoCommand(UInt16 command)
 
 static Boolean resizeMainForm(FormPtr fp)
 {
+#ifdef SCREEN_RESIZE_SUPPORT
 	WinHandle wh = FrmGetWindowHandle(fp);
 	Coord newW, newH, oldW, oldH;
 	RectangleType rect;
@@ -292,6 +294,9 @@ static Boolean resizeMainForm(FormPtr fp)
 	}
 	
 	return true;
+#else
+	return false;
+#endif
 }
 
 /*
@@ -331,8 +336,10 @@ Boolean MainFormHandleEvent(EventType * eventP)
 				WinSetConstraintsSize(FrmGetWindowHandle(fp), 160, 240, 640, 160, 240, 640);
 				PINSetInputTriggerState(pinInputTriggerEnabled);
 			}
+#ifdef HANDERA_SUPPORT
 			if (isHanderaHiRes())
 				VgaFormModify(fp, vgaFormModify160To240);
+#endif
 			resizeMainForm(fp);
 			calcPokemonNumberWidth();
 			FrmDrawForm(fp);
@@ -359,14 +366,14 @@ Boolean MainFormHandleEvent(EventType * eventP)
 				return true;
 			}
 			break;
-		
+
 		case winEnterEvent:
-			if (isHanderaHiRes())
+			if (isHanderaHiRes()) //fallthrough except for handera
 				break;
-			//fallthrough except for handera
-			//fallthrough
-			
+
+#ifdef HANDERA_SUPPORT
 		case displayExtentChangedEvent:
+#endif
 		case winDisplayChangedEvent:
 		case frmUpdateEvent:
 			if (resizeMainForm(fp)) {
diff --git a/Src/Palmkedex.c b/Src/Palmkedex.c
index 5673a66..7504866 100644
--- a/Src/Palmkedex.c
+++ b/Src/Palmkedex.c
@@ -1,3 +1,5 @@
+#include "BUILD_TYPE.h"
+
 #include <PalmOS.h>
 #include <SonyCLIE.h>
 
@@ -5,7 +7,9 @@
 #include "pokeInfo.h"
 #include "UiResourceIDs.h"
 #include "osPatches.h"
+#ifdef HANDERA_SUPPORT
 #include "myTrg.h"
+#endif
 
 
 /*********************************************************************
@@ -152,17 +156,16 @@ static void MakeSharedVariables(void)
 	Err err = errNone;
 
 	sharedVars = (SharedVariables *)MemPtrNew(sizeof(SharedVariables));
-	ErrFatalDisplayIf ((!sharedVars), "Out of memory");
 	MemSet(sharedVars, sizeof(SharedVariables), 0);
 
 	sharedVars->sizeAfterFiltering = pokeGetNumber();
 
-	err = FtrSet(appFileCreator, ftrShrdVarsNum, (UInt32)sharedVars);
-	ErrFatalDisplayIf (err != errNone, "Failed to set feature memory");
+	FtrSet(appFileCreator, ftrShrdVarsNum, (UInt32)sharedVars);
 }
 
 static Err SetColorDepth(void)
 {
+#ifdef MORE_THAN_1BPP_SUPPORT
 	UInt32 supportedDepths, desiredDepth = 8, romVersion;
 	Err err;
 	
@@ -186,7 +189,7 @@ static Err SetColorDepth(void)
 	}
 	
 	SysFatalAlert("As of now, Palmkedex does not support this device's screen.");
-	
+#endif
 	return errNone;
 }
 
@@ -212,11 +215,9 @@ static Err AppStart(void)
 static void FreeSharedVariables(void)
 {
 	SharedVariables *sharedVars;
-	Err err = errNone;
 	UInt16 i;
 
-	err = FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
-	ErrFatalDisplayIf (err != errNone, "Failed to load feature memory");
+	FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars);
 
 	MemHandleUnlock(sharedVars->indexHandle);
 	DmReleaseResource(sharedVars->indexHandle);
@@ -267,10 +268,11 @@ static Err myDisplayChangedNotifHandler(SysNotifyParamType *notifyParamsP)
 
 static Err subscribeToNotifs(void)
 {
+	Err e = errNone;
+#ifdef SCREEN_RESIZE_SUPPORT
 	SharedVariables *sharedVars;
 	UInt16 myCard;
 	LocalID myLID;
-	Err e;
 	
 	if (!sysHasNotifMgr())
 		return errNone;
@@ -283,15 +285,16 @@ static Err subscribeToNotifs(void)
 		e = SysNotifyRegister(myCard, myLID, sysNotifyDisplayChangeEvent, myDisplayChangedNotifHandler, sysNotifyNormalPriority, sharedVars);
 	if (e == errNone)
 		e = SysNotifyRegister(myCard, myLID, sysNotifyDisplayResizedEvent, myDisplayChangedNotifHandler, sysNotifyNormalPriority, sharedVars);
-
+#endif
 	return e;
 }
 
 static Err unsubFromNotifs(void)
 {
+	Err e = errNone;
+#ifdef SCREEN_RESIZE_SUPPORT
 	UInt16 myCard;
 	LocalID myLID;
-	Err e;
 	
 	if (!sysHasNotifMgr())
 		return errNone;
@@ -302,19 +305,21 @@ static Err unsubFromNotifs(void)
 		e = SysNotifyUnregister(myCard, myLID, sysNotifyDisplayChangeEvent, sysNotifyNormalPriority);
 	if (e == errNone)
 		e = SysNotifyUnregister(myCard, myLID, sysNotifyDisplayResizedEvent, sysNotifyNormalPriority);
-	
-	
+#endif
 	return e;
 }
 
 static void setupHandera(void)
 {
+#ifdef HANDERA_SUPPORT
 	if (isHanderaHiRes())
 		VgaSetScreenMode(screenMode1To1, rotateModeNone);
+#endif
 }
 
-static Err loadSonySilkLib(UInt16 * silkLibRefP, Boolean *useV2closeCallP)
+static Err loadSonySilkLib(UInt16 *silkLibRefP, Boolean *useV2closeCallP)
 {
+#ifdef SONY_SILK_SUPPORT
 	UInt32 romVersion, vskVersion;
 	Err e;
 	
@@ -348,11 +353,16 @@ static Err loadSonySilkLib(UInt16 * silkLibRefP, Boolean *useV2closeCallP)
 	}
 	
 	return e;
+#else
+	*silkLibRefP = 0xffff;
+	return errNone;
+#endif
 }
 
 
 static Err loadSonyHrLib(UInt16 *hrLibRefP)
 {
+#ifdef SONY_HIRES_SUPPORT
 	UInt32 val320 = 320, romVersion;
 	UInt16 hrLibRef;
 	Err e;
@@ -381,6 +391,10 @@ static Err loadSonyHrLib(UInt16 *hrLibRefP)
 	*hrLibRefP = hrLibRef;
 	
 	return e;
+#else
+	*hrLibRefP = 0xffff;
+	return errNone;
+#endif
 }
 
 UInt32 __attribute__((noinline)) PilotMain(UInt16 cmd, MemPtr cmdPBP, UInt16 launchFlags)
@@ -455,11 +469,13 @@ UInt32 __attribute__((section(".vectors"), used)) __Startup__(void)
 	return ret;
 }
 
-
-
 Boolean isHanderaHiRes(void)
 {
+#ifdef HANDERA_SUPPORT
 	UInt32 handeraVersion;
 	
 	return errNone == FtrGet(TRGSysFtrID, TRGVgaFtrNum, &handeraVersion);
+#else
+	return false;
+#endif
 }
\ No newline at end of file
diff --git a/Src/Palmkedex.h b/Src/Palmkedex.h
index d18f92e..ed95dec 100644
--- a/Src/Palmkedex.h
+++ b/Src/Palmkedex.h
@@ -77,6 +77,8 @@ void LoadPkmnStats(void);
 void SetFormTitle(SharedVariables *sharedVars);	//used by PkmnType.c too
 void SetLabelInfo(UInt16 labelId, UInt8 stat, FormType *frm);
 void SetDescriptionField(UInt16 selectedPkmnId);
+void drawBmpForType(enum PokeType type, Coord x, Coord y);
+
 
 // PkmnType.c
 Boolean PkmnTypeFormHandleEvent(EventType *eventP);
diff --git a/Src/PkmnMain.c b/Src/PkmnMain.c
index a9b16e1..be4b438 100644
--- a/Src/PkmnMain.c
+++ b/Src/PkmnMain.c
@@ -1,3 +1,5 @@
+#include "BUILD_TYPE.h"
+
 #include <PalmOS.h>
 
 #include "Palmkedex.h"
@@ -5,7 +7,9 @@
 #include "pokeInfo.h"
 #include "imgDraw.h"
 #include "osExtra.h"
+#ifdef HANDERA_SUPPORT
 #include "myTrg.h"
+#endif
 
 #define POKE_IMAGE_AT_X				1
 #define POKE_IMAGE_AT_Y				16
@@ -35,7 +39,6 @@ static void DrawPkmnPlaceholder(void)
 	h = DmGetResource(bitmapRsc, BmpMissingPokemon);
 
 	bitmapP = (BitmapPtr)MemHandleLock(h);
-	ErrFatalDisplayIf(!bitmapP, "Failed to lock placeholder bmp");
 
 	if (isHanderaHiRes())
 		WinDrawBitmap(bitmapP, POKE_IMAGE_AT_X_HANDERA, POKE_IMAGE_AT_Y_HANDERA);
@@ -157,36 +160,29 @@ static void FreeDescriptionField(void)
 		MemPtrFree(ptr);
 }
 
-static void DrawTypes(const struct PokeInfo *info)
+void drawBmpForType(enum PokeType type, Coord x, Coord y)
 {
-	const UInt16 x1 = isHanderaHiRes() ? POKE_TYPE_1_X_HANDERA : POKE_TYPE_1_X;
-	const UInt16 x2 = isHanderaHiRes() ? POKE_TYPE_2_X_HANDERA : POKE_TYPE_2_X;
-	const UInt16 y = isHanderaHiRes() ? POKE_TYPE_Y_HANDERA : POKE_TYPE_Y;
 	BitmapPtr bitmapP;
 	MemHandle h;
 	
-	h = DmGetResource(bitmapRsc, POKEMON_TYPE_IMAGES_BASE + (UInt8)info->type[0]);
-	ErrFatalDisplayIf(!h, "Failed to load type bmp");
-
+	h = DmGetResource(bitmapRsc, POKEMON_TYPE_IMAGES_BASE + (UInt8)type);
 	bitmapP = (BitmapPtr)MemHandleLock(h);
-	ErrFatalDisplayIf(!bitmapP, "Failed to lock type bmp");
 
-	WinDrawBitmap(bitmapP, x1, y);
-	MemPtrUnlock(bitmapP);
+	WinDrawBitmap(bitmapP, x, y);
+	MemHandleUnlock(h);
 	DmReleaseResource(h);
+}
 
-	if (info->type[1] != PokeTypeNone)
-	{
-		h = DmGetResource(bitmapRsc, POKEMON_TYPE_IMAGES_BASE + (UInt8)info->type[1]);
-		ErrFatalDisplayIf(!h, "Failed to load type bmp");
-
-		bitmapP = (BitmapPtr)MemHandleLock(h);
-		ErrFatalDisplayIf(!bitmapP, "Failed to lock type bmp");
+static void DrawTypes(const struct PokeInfo *info)
+{
+	const UInt16 x1 = isHanderaHiRes() ? POKE_TYPE_1_X_HANDERA : POKE_TYPE_1_X;
+	const UInt16 x2 = isHanderaHiRes() ? POKE_TYPE_2_X_HANDERA : POKE_TYPE_2_X;
+	const UInt16 y = isHanderaHiRes() ? POKE_TYPE_Y_HANDERA : POKE_TYPE_Y;
 
-		WinDrawBitmap(bitmapP, x2, y);
-		MemPtrUnlock(bitmapP);
-		DmReleaseResource(h);
-	}
+	drawBmpForType(info->type[0], x1, y);
+	
+	if (info->type[1] != PokeTypeNone)
+		drawBmpForType(info->type[1], x2, y);
 }
 
 void SetLabelInfo(UInt16 labelId, UInt8 stat, FormType *frm)
@@ -276,135 +272,138 @@ static Boolean PkmnMainFormDoCommand(UInt16 command)
 	return handled;
 }
 
-struct m68kLCDC {	//@0xfffffa00
-	volatile UInt32 LSSA;
-	UInt8 rfu0[1];
-	volatile UInt8 LVPW;
-	UInt8 rfu1[2];
-	volatile UInt16 LXMAX;
-	volatile UInt16 LYMAX;
-	UInt8 rfu2[12];
-	volatile UInt16 LCXP;
-	volatile UInt16 LCYP;
-	volatile UInt16 LCWCH;
-	UInt8 rfu3[1];
-	volatile UInt8 LBLKC;
-	volatile UInt8 LPICF;
-	volatile UInt8 LPOLCF;
-	UInt8 rfu4[1];
-	volatile UInt8 LACDRC;
-	UInt8 rfu5[1];
-	volatile UInt8 LPXCD;
-	UInt8 rfu6[1];
-	volatile UInt8 LCKCON;
-	UInt8 rfu7[1];
-	volatile UInt8 LLBAR;
-	UInt8 rfu8[1];
-	volatile UInt8 LOTCR;
-	UInt8 rfu9[1];
-	volatile UInt8 LPOSR;
-	UInt8 rfuA[3];
-	volatile UInt8 LFRCM;
-	volatile UInt16 LGPMR;
-};
-
-static const RectangleType imageRect = {.topLeft = {.x = 1, .y = 16}, .extent = {.x = 64, .y = 64, }};
-/*
-	There is black magic in play here, tread with caution...
-*/
-static void drawMagicandTrackPenRelease(Int16 x, Int16 y)
-{
-	struct m68kLCDC *LCDC = (struct m68kLCDC*)0xfffffa00;
-	UInt8 prevVPW, prevLBAR, prevLPICF;
-	UInt8 *restrict newSSA = NULL;
-	Boolean down, success = false;
-	SharedVariables *sharedVars;
-	UInt32 prevSSA, romVersion;
-	MemHandle imgMemHandle;
-	DmOpenRef dbRef;
-	UInt16 i, r, c;
-	
-	//this hackery is only for OS 1 & 2, which lack greyscale mode!
-	if (errNone == FtrGet(sysFtrCreator, sysFtrNumROMVersion, &romVersion) && romVersion >= sysMakeROMVersion(3,0,0,sysROMStageDevelopment,0))
-		return;
+#ifdef MAGIC_FOR_EARLY_MONO_DEVICES
+	struct m68kLCDC {	//@0xfffffa00
+		volatile UInt32 LSSA;
+		UInt8 rfu0[1];
+		volatile UInt8 LVPW;
+		UInt8 rfu1[2];
+		volatile UInt16 LXMAX;
+		volatile UInt16 LYMAX;
+		UInt8 rfu2[12];
+		volatile UInt16 LCXP;
+		volatile UInt16 LCYP;
+		volatile UInt16 LCWCH;
+		UInt8 rfu3[1];
+		volatile UInt8 LBLKC;
+		volatile UInt8 LPICF;
+		volatile UInt8 LPOLCF;
+		UInt8 rfu4[1];
+		volatile UInt8 LACDRC;
+		UInt8 rfu5[1];
+		volatile UInt8 LPXCD;
+		UInt8 rfu6[1];
+		volatile UInt8 LCKCON;
+		UInt8 rfu7[1];
+		volatile UInt8 LLBAR;
+		UInt8 rfu8[1];
+		volatile UInt8 LOTCR;
+		UInt8 rfu9[1];
+		volatile UInt8 LPOSR;
+		UInt8 rfuA[3];
+		volatile UInt8 LFRCM;
+		volatile UInt16 LGPMR;
+	};
 	
-	if (errNone != FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars))
-		return;
-	
-	dbRef = DmOpenDatabaseByTypeCreator('pSPR', 'PKSP', dmModeReadOnly);
-	if (dbRef) {
+	static const RectangleType imageRect = {.topLeft = {.x = 1, .y = 16}, .extent = {.x = 64, .y = 64, }};
+	/*
+		There is black magic in play here, tread with caution...
+	*/
+	static void drawMagicandTrackPenRelease(Int16 x, Int16 y)
+	{
+		struct m68kLCDC *LCDC = (struct m68kLCDC*)0xfffffa00;
+		UInt8 prevVPW, prevLBAR, prevLPICF;
+		UInt8 *restrict newSSA = NULL;
+		Boolean down, success = false;
+		SharedVariables *sharedVars;
+		UInt32 prevSSA, romVersion;
+		MemHandle imgMemHandle;
+		DmOpenRef dbRef;
+		UInt16 i, r, c;
 		
-		imgMemHandle = DmGet1Resource('pSPT', sharedVars->selectedPkmnId);
-		if (imgMemHandle) {
-			
-			MemHandle mh = DmNewHandle((DmOpenRef)(SysCurAppInfoPV20()->dmAccessP), 160u * 160u * 2u / 8u);
-			if (mh)
-				newSSA = MemHandleLock(mh);
-			if (newSSA) {
-			
-				struct DrawState *ds = NULL;
+		//this hackery is only for OS 1 & 2, which lack greyscale mode!
+		if (errNone == FtrGet(sysFtrCreator, sysFtrNumROMVersion, &romVersion) && romVersion >= sysMakeROMVersion(3,0,0,sysROMStageDevelopment,0))
+			return;
+		
+		if (errNone != FtrGet(appFileCreator, ftrShrdVarsNum, (UInt32*)&sharedVars))
+			return;
+		
+		dbRef = DmOpenDatabaseByTypeCreator('pSPR', 'PKSP', dmModeReadOnly);
+		if (dbRef) {
 			
-				MemSemaphoreReserve(true);
-				if (imgDecode(&ds, MemHandleLock(imgMemHandle), MemHandleSize(imgMemHandle), 64, 64, 2)) {
-					
-					static const UInt16 expandTab[] = {0x0000, 0x0005, 0x000a, 0x000f, 0x0050, 0x0055, 0x005a, 0x005f, 0x00a0, 0x00a5, 0x00aa, 0x00af, 0x00f0, 0x00f5, 0x00fa, 0x00ff, 0x0500, 0x0505, 0x050a, 0x050f, 0x0550, 0x0555, 0x055a, 0x055f, 0x05a0, 0x05a5, 0x05aa, 0x05af, 0x05f0, 0x05f5, 0x05fa, 0x05ff, 0x0a00, 0x0a05, 0x0a0a, 0x0a0f, 0x0a50, 0x0a55, 0x0a5a, 0x0a5f, 0x0aa0, 0x0aa5, 0x0aaa, 0x0aaf, 0x0af0, 0x0af5, 0x0afa, 0x0aff, 0x0f00, 0x0f05, 0x0f0a, 0x0f0f, 0x0f50, 0x0f55, 0x0f5a, 0x0f5f, 0x0fa0, 0x0fa5, 0x0faa, 0x0faf, 0x0ff0, 0x0ff5, 0x0ffa, 0x0fff, 0x5000, 0x5005, 0x500a, 0x500f, 0x5050, 0x5055, 0x505a, 0x505f, 0x50a0, 0x50a5, 0x50aa, 0x50af, 0x50f0, 0x50f5, 0x50fa, 0x50ff, 0x5500, 0x5505, 0x550a, 0x550f, 0x5550, 0x5555, 0x555a, 0x555f, 0x55a0, 0x55a5, 0x55aa, 0x55af, 0x55f0, 0x55f5, 0x55fa, 0x55ff, 0x5a00, 0x5a05, 0x5a0a, 0x5a0f, 0x5a50, 0x5a55, 0x5a5a, 0x5a5f, 0x5aa0, 0x5aa5, 0x5aaa, 0x5aaf, 0x5af0, 0x5af5, 0x5afa, 0x5aff, 0x5f00, 0x5f05, 0x5f0a, 0x5f0f, 0x5f50, 0x5f55, 0x5f5a, 0x5f5f, 0x5fa0, 0x5fa5, 0x5faa, 0x5faf, 0x5ff0, 0x5ff5, 0x5ffa, 0x5fff, 0xa000, 0xa005, 0xa00a, 0xa00f, 0xa050, 0xa055, 0xa05a, 0xa05f, 0xa0a0, 0xa0a5, 0xa0aa, 0xa0af, 0xa0f0, 0xa0f5, 0xa0fa, 0xa0ff, 0xa500, 0xa505, 0xa50a, 0xa50f, 0xa550, 0xa555, 0xa55a, 0xa55f, 0xa5a0, 0xa5a5, 0xa5aa, 0xa5af, 0xa5f0, 0xa5f5, 0xa5fa, 0xa5ff, 0xaa00, 0xaa05, 0xaa0a, 0xaa0f, 0xaa50, 0xaa55, 0xaa5a, 0xaa5f, 0xaaa0, 0xaaa5, 0xaaaa, 0xaaaf, 0xaaf0, 0xaaf5, 0xaafa, 0xaaff, 0xaf00, 0xaf05, 0xaf0a, 0xaf0f, 0xaf50, 0xaf55, 0xaf5a, 0xaf5f, 0xafa0, 0xafa5, 0xafaa, 0xafaf, 0xaff0, 0xaff5, 0xaffa, 0xafff, 0xf000, 0xf005, 0xf00a, 0xf00f, 0xf050, 0xf055, 0xf05a, 0xf05f, 0xf0a0, 0xf0a5, 0xf0aa, 0xf0af, 0xf0f0, 0xf0f5, 0xf0fa, 0xf0ff, 0xf500, 0xf505, 0xf50a, 0xf50f, 0xf550, 0xf555, 0xf55a, 0xf55f, 0xf5a0, 0xf5a5, 0xf5aa, 0xf5af, 0xf5f0, 0xf5f5, 0xf5fa, 0xf5ff, 0xfa00, 0xfa05, 0xfa0a, 0xfa0f, 0xfa50, 0xfa55, 0xfa5a, 0xfa5f, 0xfaa0, 0xfaa5, 0xfaaa, 0xfaaf, 0xfaf0, 0xfaf5, 0xfafa, 0xfaff, 0xff00, 0xff05, 0xff0a, 0xff0f, 0xff50, 0xff55, 0xff5a, 0xff5f, 0xffa0, 0xffa5, 0xffaa, 0xffaf, 0xfff0, 0xfff5, 0xfffa, 0xffff, };
-					const volatile UInt8 *src = imgGetBits(ds);
-					UInt16 *dst = (UInt16*)newSSA;
-					
-					MemSet(newSSA, 160u * 160u * 2u / 8u, 0);
-					
-					dst += 160 * 16 * 2 / 16;
-					for (r = 0; r < 128; r++) {
+			imgMemHandle = DmGet1Resource('pSPT', sharedVars->selectedPkmnId);
+			if (imgMemHandle) {
+				
+				MemHandle mh = DmNewHandle((DmOpenRef)(SysCurAppInfoPV20()->dmAccessP), 160u * 160u * 2u / 8u);
+				if (mh)
+					newSSA = MemHandleLock(mh);
+				if (newSSA) {
+				
+					struct DrawState *ds = NULL;
+				
+					MemSemaphoreReserve(true);
+					if (imgDecode(&ds, MemHandleLock(imgMemHandle), MemHandleSize(imgMemHandle), 64, 64, 2)) {
+						
+						static const UInt16 expandTab[] = {0x0000, 0x0005, 0x000a, 0x000f, 0x0050, 0x0055, 0x005a, 0x005f, 0x00a0, 0x00a5, 0x00aa, 0x00af, 0x00f0, 0x00f5, 0x00fa, 0x00ff, 0x0500, 0x0505, 0x050a, 0x050f, 0x0550, 0x0555, 0x055a, 0x055f, 0x05a0, 0x05a5, 0x05aa, 0x05af, 0x05f0, 0x05f5, 0x05fa, 0x05ff, 0x0a00, 0x0a05, 0x0a0a, 0x0a0f, 0x0a50, 0x0a55, 0x0a5a, 0x0a5f, 0x0aa0, 0x0aa5, 0x0aaa, 0x0aaf, 0x0af0, 0x0af5, 0x0afa, 0x0aff, 0x0f00, 0x0f05, 0x0f0a, 0x0f0f, 0x0f50, 0x0f55, 0x0f5a, 0x0f5f, 0x0fa0, 0x0fa5, 0x0faa, 0x0faf, 0x0ff0, 0x0ff5, 0x0ffa, 0x0fff, 0x5000, 0x5005, 0x500a, 0x500f, 0x5050, 0x5055, 0x505a, 0x505f, 0x50a0, 0x50a5, 0x50aa, 0x50af, 0x50f0, 0x50f5, 0x50fa, 0x50ff, 0x5500, 0x5505, 0x550a, 0x550f, 0x5550, 0x5555, 0x555a, 0x555f, 0x55a0, 0x55a5, 0x55aa, 0x55af, 0x55f0, 0x55f5, 0x55fa, 0x55ff, 0x5a00, 0x5a05, 0x5a0a, 0x5a0f, 0x5a50, 0x5a55, 0x5a5a, 0x5a5f, 0x5aa0, 0x5aa5, 0x5aaa, 0x5aaf, 0x5af0, 0x5af5, 0x5afa, 0x5aff, 0x5f00, 0x5f05, 0x5f0a, 0x5f0f, 0x5f50, 0x5f55, 0x5f5a, 0x5f5f, 0x5fa0, 0x5fa5, 0x5faa, 0x5faf, 0x5ff0, 0x5ff5, 0x5ffa, 0x5fff, 0xa000, 0xa005, 0xa00a, 0xa00f, 0xa050, 0xa055, 0xa05a, 0xa05f, 0xa0a0, 0xa0a5, 0xa0aa, 0xa0af, 0xa0f0, 0xa0f5, 0xa0fa, 0xa0ff, 0xa500, 0xa505, 0xa50a, 0xa50f, 0xa550, 0xa555, 0xa55a, 0xa55f, 0xa5a0, 0xa5a5, 0xa5aa, 0xa5af, 0xa5f0, 0xa5f5, 0xa5fa, 0xa5ff, 0xaa00, 0xaa05, 0xaa0a, 0xaa0f, 0xaa50, 0xaa55, 0xaa5a, 0xaa5f, 0xaaa0, 0xaaa5, 0xaaaa, 0xaaaf, 0xaaf0, 0xaaf5, 0xaafa, 0xaaff, 0xaf00, 0xaf05, 0xaf0a, 0xaf0f, 0xaf50, 0xaf55, 0xaf5a, 0xaf5f, 0xafa0, 0xafa5, 0xafaa, 0xafaf, 0xaff0, 0xaff5, 0xaffa, 0xafff, 0xf000, 0xf005, 0xf00a, 0xf00f, 0xf050, 0xf055, 0xf05a, 0xf05f, 0xf0a0, 0xf0a5, 0xf0aa, 0xf0af, 0xf0f0, 0xf0f5, 0xf0fa, 0xf0ff, 0xf500, 0xf505, 0xf50a, 0xf50f, 0xf550, 0xf555, 0xf55a, 0xf55f, 0xf5a0, 0xf5a5, 0xf5aa, 0xf5af, 0xf5f0, 0xf5f5, 0xf5fa, 0xf5ff, 0xfa00, 0xfa05, 0xfa0a, 0xfa0f, 0xfa50, 0xfa55, 0xfa5a, 0xfa5f, 0xfaa0, 0xfaa5, 0xfaaa, 0xfaaf, 0xfaf0, 0xfaf5, 0xfafa, 0xfaff, 0xff00, 0xff05, 0xff0a, 0xff0f, 0xff50, 0xff55, 0xff5a, 0xff5f, 0xffa0, 0xffa5, 0xffaa, 0xffaf, 0xfff0, 0xfff5, 0xfffa, 0xffff, };
+						const volatile UInt8 *src = imgGetBits(ds);
+						UInt16 *dst = (UInt16*)newSSA;
 						
-						dst += 2;
-						for (c = 0; c < 128 / 8; c++) {
+						MemSet(newSSA, 160u * 160u * 2u / 8u, 0);
+						
+						dst += 160 * 16 * 2 / 16;
+						for (r = 0; r < 128; r++) {
 							
-							*dst++ = expandTab[src[c]];
+							dst += 2;
+							for (c = 0; c < 128 / 8; c++) {
+								
+								*dst++ = expandTab[src[c]];
+							}
+							dst += 2;
+							if (r & 1)
+								src += 64 * 2 / 8;
 						}
-						dst += 2;
-						if (r & 1)
-							src += 64 * 2 / 8;
+						
+						prevSSA = LCDC->LSSA;
+						LCDC->LSSA = (UInt32)newSSA;
+						prevVPW = LCDC->LVPW;
+						prevLBAR = LCDC->LLBAR;
+						LCDC->LLBAR = 20;
+						LCDC->LVPW = 20;
+						prevLPICF = LCDC->LPICF;
+						LCDC->LPICF |= 1;
+						
+						success = true;
+						imgDrawStateFree(ds);
 					}
-					
-					prevSSA = LCDC->LSSA;
-					LCDC->LSSA = (UInt32)newSSA;
-					prevVPW = LCDC->LVPW;
-					prevLBAR = LCDC->LLBAR;
-					LCDC->LLBAR = 20;
-					LCDC->LVPW = 20;
-					prevLPICF = LCDC->LPICF;
-					LCDC->LPICF |= 1;
-					
-					success = true;
-					imgDrawStateFree(ds);
+					MemSemaphoreRelease(true);
+					MemHandleUnlock(imgMemHandle);
+					DmReleaseResource(imgMemHandle);
 				}
-				MemSemaphoreRelease(true);
-				MemHandleUnlock(imgMemHandle);
-				DmReleaseResource(imgMemHandle);
 			}
+			DmCloseDatabase(dbRef);
 		}
-		DmCloseDatabase(dbRef);
-	}
-	
-	if (success) {
-		
-		do {
-			EvtGetPen(&x, &y, &down);
-		} while (down);
-		LCDC->LPICF = prevLPICF;
-		LCDC->LLBAR = prevLBAR;
-		LCDC->LVPW = prevVPW;
-		LCDC->LSSA = prevSSA;
 		
-		FrmDrawForm(FrmGetActiveForm());
-		DrawPkmnSprite(sharedVars->selectedPkmnId);
+		if (success) {
+			
+			do {
+				EvtGetPen(&x, &y, &down);
+			} while (down);
+			LCDC->LPICF = prevLPICF;
+			LCDC->LLBAR = prevLBAR;
+			LCDC->LVPW = prevVPW;
+			LCDC->LSSA = prevSSA;
+			
+			FrmDrawForm(FrmGetActiveForm());
+			DrawPkmnSprite(sharedVars->selectedPkmnId);
+		}
+		if (newSSA)
+			MemPtrFree(newSSA);
 	}
-	if (newSSA)
-		MemPtrFree(newSSA);
-}
+#endif
 
 static Boolean resizePkmnMainForm(FormPtr fp)
 {
+#ifdef SCREEN_RESIZE_SUPPORT
 	WinHandle wh = FrmGetWindowHandle(fp);
 	Coord newW, newH, oldW, oldH;
 	FieldPtr field = NULL;
@@ -454,6 +453,9 @@ static Boolean resizePkmnMainForm(FormPtr fp)
 	if (field)
 		FldRecalculateField(field, true /* we do not need the redraw but before PalmOs 4.0, without it, no recalculation takes place */);
 	return true;
+#else
+	return false;
+#endif
 }
 
 /*
@@ -482,11 +484,13 @@ Boolean PkmnMainFormHandleEvent(EventType *eventP)
 
 	switch (eventP->eType)
 	{
+#ifdef MAGIC_FOR_EARLY_MONO_DEVICES
 	case penDownEvent:
 		if (RctPtInRectangle(eventP->screenX, eventP->screenY, &imageRect)) {
 			drawMagicandTrackPenRelease(eventP->screenX, eventP->screenY);
 			return true;
 		}
+#endif
 		break;
 	
 	case ctlSelectEvent:
@@ -498,8 +502,10 @@ Boolean PkmnMainFormHandleEvent(EventType *eventP)
 			WinSetConstraintsSize(FrmGetWindowHandle(frmP), 160, 240, 640, 160, 240, 640);
 			PINSetInputTriggerState(pinInputTriggerEnabled);
 		}
+#ifdef HANDERA_SUPPORT
 		if (isHanderaHiRes())
 			VgaFormModify(frmP, vgaFormModify160To240);
+#endif
 		resizePkmnMainForm(frmP);
 		FrmDrawForm(frmP);
 		LoadPkmnStats();
@@ -534,12 +540,13 @@ Boolean PkmnMainFormHandleEvent(EventType *eventP)
 		break;
 
 	case winEnterEvent:
-		if (isHanderaHiRes())
+		if (isHanderaHiRes())	//fallthrough except for handera
 			break;
-		//fallthrough except for handera
 		//fallthrough
 		
+#ifdef HANDERA_SUPPORT
 	case displayExtentChangedEvent:
+#endif
 	case winDisplayChangedEvent:
 	case frmUpdateEvent:
 		if (resizePkmnMainForm(frmP)) {
diff --git a/Src/PkmnType.c b/Src/PkmnType.c
index 11f1002..500dd03 100644
--- a/Src/PkmnType.c
+++ b/Src/PkmnType.c
@@ -1,9 +1,13 @@
+#include "BUILD_TYPE.h"
+
 #include <PalmOS.h>
 
 #include "Palmkedex.h"
 #include "pokeInfo.h"
 #include "UiResourceIDs.h"
+#ifdef HANDERA_SUPPORT
 #include "myTrg.h"
+#endif
 
 #define TYPES_START_X				1
 #define TYPES_START_Y				19
@@ -24,8 +28,7 @@
 
 static RGBColorType GetRGBForEff(UInt16 damage)
 {
-	RGBColorType rgb;
-	MemSet(&rgb, sizeof(rgb), 0);
+	RGBColorType rgb = {};
 	
 	switch (damage)
 	{
@@ -95,19 +98,24 @@ static void DrawEffectiveness(UInt16 selectedPkmnID, UInt8 x, UInt8 y, enum Poke
 		romVersion = 0;
 
 	prevFont = FntSetFont(stdFont);
+	
+#ifdef MORE_THAN_1BPP_SUPPORT
 	if (romVersion >= sysMakeROMVersion(3,5,0,sysROMStageRelease,0)) {
 		
 		prevColor = WinSetTextColor(0);	//get current color
 		WinSetTextColor(prevColor);
 	}
+#endif
 	
 	if (effectiveness != 100){
 		FntSetFont(boldFont);
 		
 		rgb = GetRGBForEff(effectiveness);
-		
+
+#ifdef MORE_THAN_1BPP_SUPPORT
 		if (romVersion >= sysMakeROMVersion(3,5,0,sysROMStageRelease,0))
 			WinSetTextColor(WinRGBToIndex(&rgb));
+#endif
 	}
 
 	WinDrawChars("x ", 2, x, y);
@@ -123,18 +131,18 @@ static void DrawEffectiveness(UInt16 selectedPkmnID, UInt8 x, UInt8 y, enum Poke
 	}
 	else 
 	{
-		str = (Char *)MemPtrNew(sizeof(Char[4]));
-		ErrFatalDisplayIf ((UInt32)str == 0, "Out of memory");
-		MemSet(str, sizeof(Char[4]), 0);
+		char str[4];
 		StrIToA(str, effectiveness/100);
     	WinDrawChars(str, StrLen(str), x, y);
-    
-		MemPtrFree(str);
 	}
 	
 	FntSetFont(prevFont);
+#ifdef MORE_THAN_1BPP_SUPPORT
 	if (romVersion >= sysMakeROMVersion(3,5,0,sysROMStageRelease,0))
 		WinSetTextColor(prevColor);
+#endif
+
+	(void)rgb;	//quiet down GCC's warnings
 }
 
 
@@ -152,15 +160,7 @@ static void DrawTypeIcons(UInt16 selectedPkmnID)
 
     for (i = PokeTypeFirst; i <= PokeTypeFairy; i++)
     {
-        h = DmGetResource(bitmapRsc, POKEMON_TYPE_IMAGES_BASE + i);
-        ErrFatalDisplayIf(!h, "Failed to load type bmp");
-
-        bitmapP = (BitmapPtr)MemHandleLock(h);
-        ErrFatalDisplayIf(!bitmapP, "Failed to lock type bmp");
-
-        WinDrawBitmap (bitmapP, x, y);
-        MemPtrUnlock (bitmapP);
-        DmReleaseResource(h);
+    	drawBmpForType(i, x, y);
 
         DrawEffectiveness(selectedPkmnID, x, y, (enum PokeType)i);
 
@@ -232,6 +232,7 @@ static Boolean PkmnTypeFormDoCommand(UInt16 command)
 
 static Boolean resizePkmnTypeForm(FormPtr fp)
 {
+#ifdef SCREEN_RESIZE_SUPPORT
 	WinHandle wh = FrmGetWindowHandle(fp);
 	Coord newW, newH, oldW, oldH;
 	RectangleType rect;
@@ -272,6 +273,9 @@ static Boolean resizePkmnTypeForm(FormPtr fp)
 	}
 	
 	return true;
+#else
+	return false;
+#endif
 }
 
 Boolean PkmnTypeFormHandleEvent(EventType * eventP)
@@ -291,8 +295,10 @@ Boolean PkmnTypeFormHandleEvent(EventType * eventP)
 				WinSetConstraintsSize(FrmGetWindowHandle(frmP), 160, 240, 640, 160, 240, 640);
 				PINSetInputTriggerState(pinInputTriggerEnabled);
 			}
+#ifdef HANDERA_SUPPORT
 			if (isHanderaHiRes())
 				VgaFormModify(frmP, vgaFormModify160To240);
+#endif
 			resizePkmnTypeForm(frmP);
 			FrmDrawForm(frmP);
             InitializeForm();
@@ -308,12 +314,14 @@ Boolean PkmnTypeFormHandleEvent(EventType * eventP)
 			break;
 
 		case winEnterEvent:
-			if (isHanderaHiRes())
+			if (isHanderaHiRes())	//fallthrough except for handera
 				break;
-			//fallthrough except for handera
 			//fallthrough
-			
+
+#ifdef HANDERA_SUPPORT	
 		case displayExtentChangedEvent:
+#endif
+
 		case winDisplayChangedEvent:
 		case frmUpdateEvent:
 			if (resizePkmnTypeForm(frmP)) {
diff --git a/Src/imgDraw.c b/Src/imgDraw.c
index a09528c..1ebdd8e 100644
--- a/Src/imgDraw.c
+++ b/Src/imgDraw.c
@@ -1,13 +1,22 @@
+#include "BUILD_TYPE.h"
+
 #define ALLOW_ACCESS_TO_INTERNALS_OF_BITMAPS
 #include <PalmOS.h>
-#include <PceNativeCall.h>
-#include <SonyCLIE.h>
 #include "imgDrawInt.h"
 #include "Palmkedex.h"
 #include "osPatches.h"
 #include "imgDraw.h"
 #include "osExtra.h"
+#ifdef HANDERA_SUPPORT
 #include "myTrg.h"
+#endif
+#ifdef SONY_HIRES_SUPPORT
+#include <SonyCLIE.h>
+#endif
+#ifdef ARM_PROCESSOR_SUPPORT
+#include <PceNativeCall.h>
+#endif
+
 #include "glue.h"
 
 
@@ -23,16 +32,24 @@
 
 static Boolean isHighDensitySupported(void)
 {
+#ifdef SUPPORT_PALM_HIGH_DENSITY
 	UInt32 version;
 	
 	return errNone == FtrGet(sysFtrCreator, sysFtrNumWinVersion, &version) && version >= 4;
+#else
+	return false;
+#endif
 }
 
 static Boolean isSonyHiResSupported(void)
 {
+#ifdef SONY_HIRES_SUPPORT
 	UInt16 hrLibRef;
 	
 	return errNone == SysLibFind(sonySysLibNameHR, &hrLibRef) && hrLibRef != 0xffff;
+#else
+	return false;
+#endif
 }
 
 static UInt8 getSupportedBitmapDensities(void)
@@ -57,6 +74,7 @@ static UInt8 getSupportedBitmapDensities(void)
 		
 		return BLITTER_CAN_DRAW_1x | BLITTER_CAN_DRAW_2x;
 	}
+#ifdef HANDERA_SUPPORT
 	else if (isHanderaHiRes()) {
 		
 		VgaRotateModeType curRot;
@@ -69,6 +87,7 @@ static UInt8 getSupportedBitmapDensities(void)
 		else							//auto-magnified mode can only draw magified
 			return BLITTER_CAN_DRAW_1x;
 	}
+#endif
 	else {
 		
 		return BLITTER_CAN_DRAW_1x;
@@ -90,6 +109,7 @@ static UInt16 getScreenDensity(void)
 		
 		return kDensityDouble;
 	}
+#ifdef HANDERA_SUPPORT
 	else if (isHanderaHiRes()) {
 		
 		VgaRotateModeType curRot;
@@ -102,6 +122,7 @@ static UInt16 getScreenDensity(void)
 		else							//auto-magnified mode: basically a shitty low density screen with ugly shapes
 			return kDensityLow;
 	}
+#endif
 	else {
 		
 		return kDensityLow;
@@ -138,6 +159,7 @@ void imgDrawRedraw(struct DrawState *ds, int16_t x, int16_t y)
 			}
 		}
 	}
+#ifdef SONY_HIRES_SUPPORT
 	else if (isSonyHiResSupported()) {
 		
 		if (ds->density == kDensityLow)
@@ -150,6 +172,8 @@ void imgDrawRedraw(struct DrawState *ds, int16_t x, int16_t y)
 				HRWinDrawBitmap(hrLibRef, ds->b, x * 2, y * 2);
 		}
 	}
+#endif
+#ifdef HANDERA_SUPPORT
 	else if (isHanderaHiRes()) {
 		
 		VgaRotateModeType curRot;
@@ -175,6 +199,7 @@ void imgDrawRedraw(struct DrawState *ds, int16_t x, int16_t y)
 			WinDrawBitmap(ds->b, x, y);
 		}
 	}
+#endif
 	else {
 		
 		WinDrawBitmap(ds->b, x, y);
@@ -187,6 +212,7 @@ static unsigned char imgDrawHdrCbk(struct DrawState *ds, uint32_t w, uint32_t h,
 	Boolean colorSupport;
 	Err err;
 
+#ifdef MORE_THAN_1BPP_SUPPORT
 	if (errNone != FtrGet(sysFtrCreator, sysFtrNumROMVersion, &romVersion) || romVersion < sysMakeROMVersion(3,0,0,sysROMStageDevelopment,0)) {
 		
 		colorSupport = false;
@@ -196,6 +222,10 @@ static unsigned char imgDrawHdrCbk(struct DrawState *ds, uint32_t w, uint32_t h,
 		
 		colorSupport = false;
 	}
+#else
+	curDepth = 1;
+	colorSupport = false;
+#endif
 	
 	//honour requested depth
 	if (ds->depth)
@@ -371,6 +401,7 @@ static int imgDecodeCall(struct DrawState *ds, const void *data, uint32_t dataSz
 	UInt32 processorType, result, romVersion;
 	int ret;
 	
+#ifdef ARM_PROCESSOR_SUPPORT
 	if (errNone == FtrGet(sysFileCSystem, sysFtrNumProcessorID, &processorType)	&& sysFtrNumProcessorIsARM(processorType)) {
 		
 		MemHandle armH;
@@ -386,10 +417,10 @@ static int imgDecodeCall(struct DrawState *ds, const void *data, uint32_t dataSz
 		MemHandleUnlock(armH);
 		DmReleaseResource(armH);
 	}
-	else {
-		
+	else
+#endif
 		ret = aciDecode(ds, data, dataSz, imgDrawHdrCbk);
-	}
+
 	
 	//repack
 	if (ret >= 0 && ds->depth < 8) {
diff --git a/Src/osPatches.c b/Src/osPatches.c
index 819568b..d2c7246 100644
--- a/Src/osPatches.c
+++ b/Src/osPatches.c
@@ -1,3 +1,5 @@
+#include "BUILD_TYPE.h"
+
 #define ALLOW_ACCESS_TO_INTERNALS_OF_BITMAPS
 #include "osPatches.h"
 #include "Palmkedex.h"
@@ -41,117 +43,120 @@ static struct OsPatchState* osPatchesGetState(Boolean allocIfNone)
 	
 	return ret;
 }
-
-static Err osPatchesBltCopyRectangle(const void* dstState, const BitmapType* srcBmp, RectangleType* clippedDstRect, Int16 srcX, Int16 srcY)
-{
-	struct OsPatchState *osps = osPatchesGetState(false);
-	BitmapPtrV2 srcBmpV2 = (BitmapPtrV2)srcBmp;
-	
-	//it would see that we have no rason to patch this function - our beef, after all, if only with ScrDecompress()
-	//but in OS4.0, ScrDecompress dispatches to ScrDecompress8 or ScrDecompress16 based on passed-in state, where the
-	//first byte has the depth. In PalmOS 3.5 nobody will do this for us, so we are forced to track down all callers
-	//of ScrDecompress() and patch them and record the depth of the source material. Luckily there is only one caller:
-	//BltCopyRectangle(). Thus this patch :)
-	
-	if (srcBmp && srcBmp->flags.compressed && srcBmp->version == 2 && srcBmpV2->compressionType == BitmapCompressionTypePackBits) {
-		
-		UInt8 prevDecompressType = osps->curPackbitsDecompressDepth;
-		Err ret;
-		
-		osps->curPackbitsDecompressDepth = srcBmp->pixelSize;
-		ret = osps->oldTrapBltCopyRectangle(dstState, srcBmp, clippedDstRect, srcX, srcY);
-		osps->curPackbitsDecompressDepth = prevDecompressType;
-		
-		return ret;
-	}
-	else
-		return osps->oldTrapBltCopyRectangle(dstState, srcBmp, clippedDstRect, srcX, srcY);
-}
 
-static Int32 osPatchesScrDecompressPackBits8(const UInt8 *src, UInt8 *dst, UInt32 dstLen)
-{
-	const UInt8 *srcInitial = src;
-	UInt8 *dstEnd = dst + dstLen;
-	
-	while (dst < dstEnd) {
+#ifdef MORE_THAN_1BPP_SUPPORT	//packbits not used on 1bpp v1 bitmaps
+	
+	static Err osPatchesBltCopyRectangle(const void* dstState, const BitmapType* srcBmp, RectangleType* clippedDstRect, Int16 srcX, Int16 srcY)
+	{
+		struct OsPatchState *osps = osPatchesGetState(false);
+		BitmapPtrV2 srcBmpV2 = (BitmapPtrV2)srcBmp;
 		
-		UInt8 action = *src++;
+		//it would see that we have no reason to patch this function - our beef, after all, if only with ScrDecompress()
+		//but in OS4.0, ScrDecompress dispatches to ScrDecompress8 or ScrDecompress16 based on passed-in state, where the
+		//first byte has the depth. In PalmOS 3.5 nobody will do this for us, so we are forced to track down all callers
+		//of ScrDecompress() and patch them and record the depth of the source material. Luckily there is only one caller:
+		//BltCopyRectangle(). Thus this patch :)
 		
-		if (action < 128) {
+		if (srcBmp && srcBmp->flags.compressed && srcBmp->version == 2 && srcBmpV2->compressionType == BitmapCompressionTypePackBits) {
 			
-			action++;
-			if (dstEnd - dst < action)
-				return -1;
-			while (action--)
-				*dst++ = *src++;
-		}
-		else {
-			
-			UInt8 val = *src++;
-			
-			action = 1 - action;
+			UInt8 prevDecompressType = osps->curPackbitsDecompressDepth;
+			Err ret;
 			
-			if (dstEnd - dst < action)
-				return -1;
+			osps->curPackbitsDecompressDepth = srcBmp->pixelSize;
+			ret = osps->oldTrapBltCopyRectangle(dstState, srcBmp, clippedDstRect, srcX, srcY);
+			osps->curPackbitsDecompressDepth = prevDecompressType;
 			
-			while (action--)
-				*dst++ = val;
+			return ret;
 		}
-	}
-	return src - srcInitial;
-}
-
-
-static Int32 osPatchesScrDecompressPackBits16(const UInt8 *src, UInt16 *dst, UInt32 dstLen)
-{
-	const UInt8 *srcInitial = src;
-	UInt16 *dstEnd = dst + dstLen;
+		else
+			return osps->oldTrapBltCopyRectangle(dstState, srcBmp, clippedDstRect, srcX, srcY);
+	}
 	
-	while (dst < dstEnd) {
-		
-		UInt8 action = *src++;
+	static Int32 osPatchesScrDecompressPackBits8(const UInt8 *src, UInt8 *dst, UInt32 dstLen)
+	{
+		const UInt8 *srcInitial = src;
+		UInt8 *dstEnd = dst + dstLen;
 		
-		if (action < 128) {
+		while (dst < dstEnd) {
 			
-			action++;
-			if (dstEnd - dst < action)
-				return -1;
-			while (action--) {
-				UInt16 val = *src++;
-				val = (val << 8) + *src++;
+			UInt8 action = *src++;
+			
+			if (action < 128) {
 				
-				*dst++ = val;
+				action++;
+				if (dstEnd - dst < action)
+					return -1;
+				while (action--)
+					*dst++ = *src++;
 			}
-		}
-		else {
-			
-			UInt16 val = val = *src++;
-			val = (val << 8) + *src++;
-			
-			action = 1 - action;
+			else {
+				
+				UInt8 val = *src++;
+				
+				action = 1 - action;
+				
+				if (dstEnd - dst < action)
+					return -1;
+				
+				while (action--)
+					*dst++ = val;
+			}
+		}
+		return src - srcInitial;
+	}
+	
+	
+	static Int32 osPatchesScrDecompressPackBits16(const UInt8 *src, UInt16 *dst, UInt32 dstLen)
+	{
+		const UInt8 *srcInitial = src;
+		UInt16 *dstEnd = dst + dstLen;
+		
+		while (dst < dstEnd) {
 			
-			if (dstEnd - dst < action)
-				return -1;
+			UInt8 action = *src++;
 			
-			while (action--)
-				*dst++ = val;
-		}
-	}
-	return src - srcInitial;
-}
-
-
-static Int32 osPatchesScrDecompress(BitmapCompressionType comprTyp, const UInt8 *src, UInt32 srcLen, UInt8 *dst, UInt32 dstLen, struct DecompressState *dcs)
-{
-	struct OsPatchState *osps = osPatchesGetState(false);
+			if (action < 128) {
+				
+				action++;
+				if (dstEnd - dst < action)
+					return -1;
+				while (action--) {
+					UInt16 val = *src++;
+					val = (val << 8) + *src++;
+					
+					*dst++ = val;
+				}
+			}
+			else {
+				
+				UInt16 val = val = *src++;
+				val = (val << 8) + *src++;
+				
+				action = 1 - action;
+				
+				if (dstEnd - dst < action)
+					return -1;
+				
+				while (action--)
+					*dst++ = val;
+			}
+		}
+		return src - srcInitial;
+	}
 	
-	if (comprTyp != BitmapCompressionTypePackBits)
-		return osps->oldTrapScrDecompress(comprTyp, src, srcLen, dst, dstLen, dcs);
-	else if (osps->curPackbitsDecompressDepth == 16)
-		return osPatchesScrDecompressPackBits16(src, (UInt16*)dst, dstLen / sizeof(UInt16));
-	else
-		return osPatchesScrDecompressPackBits8(src, dst, dstLen);
-}
+	
+	static Int32 osPatchesScrDecompress(BitmapCompressionType comprTyp, const UInt8 *src, UInt32 srcLen, UInt8 *dst, UInt32 dstLen, struct DecompressState *dcs)
+	{
+		struct OsPatchState *osps = osPatchesGetState(false);
+		
+		if (comprTyp != BitmapCompressionTypePackBits)
+			return osps->oldTrapScrDecompress(comprTyp, src, srcLen, dst, dstLen, dcs);
+		else if (osps->curPackbitsDecompressDepth == 16)
+			return osPatchesScrDecompressPackBits16(src, (UInt16*)dst, dstLen / sizeof(UInt16));
+		else
+			return osPatchesScrDecompressPackBits8(src, dst, dstLen);
+	}
+#endif
 
 static BitmapPtr osPatchesPrvV3bmpToV2bmp(const BitmapPtr src)
 {
@@ -288,123 +293,127 @@ static BitmapPtr osPatchesPrvV3bmpToV2bmp(const BitmapPtr src)
 	return NULL;
 }
 
-static void osPatchesWinDrawBitmapHandera(BitmapPtr bitmapP, Coord x, Coord y)
-{
-	struct OsPatchState *osps = osPatchesGetState(false);
-	Boolean osSupports16bppImages;
-	UInt32 curDepth, romVersion;
-	VgaRotateModeType curRot;
-	VgaScreenModeType curMod;
-	
-	VgaGetScreenMode(&curMod, &curRot);
-	if (!osps->winDrawBitmapPatchesDisabled && curMod == screenMode1To1) {
+#ifdef HANDERA_SUPPORT
+	static void osPatchesWinDrawBitmapHandera(BitmapPtr bitmapP, Coord x, Coord y)
+	{
+		struct OsPatchState *osps = osPatchesGetState(false);
+		Boolean osSupports16bppImages;
+		UInt32 curDepth, romVersion;
+		VgaRotateModeType curRot;
+		VgaScreenModeType curMod;
 		
-		//this is wrong on the Visor Prism,but this patch is not enabled there...
-		osSupports16bppImages = errNone == FtrGet(sysFtrCreator, sysFtrNumROMVersion, &romVersion) && romVersion >= sysMakeROMVersion(4,0,0,sysROMStageRelease,0);
-		
-		if (!osps->inWinDrawBitmapPatch && errNone == WinScreenMode(winScreenModeGet, NULL, NULL, &curDepth, NULL)) {
-			
-			BitmapPtr bestHr = NULL;
-			UInt8 bestHrDepth = 0;
-			BitmapPtr cur;
+		VgaGetScreenMode(&curMod, &curRot);
+		if (!osps->winDrawBitmapPatchesDisabled && curMod == screenMode1To1) {
 			
-			osps->inWinDrawBitmapPatch = true;
+			//this is wrong on the Visor Prism,but this patch is not enabled there...
+			osSupports16bppImages = errNone == FtrGet(sysFtrCreator, sysFtrNumROMVersion, &romVersion) && romVersion >= sysMakeROMVersion(4,0,0,sysROMStageRelease,0);
 			
-			for (cur = bitmapP; cur; cur = BmpGlueGetNextBitmapAnyDensity(cur)) {
+			if (!osps->inWinDrawBitmapPatch && errNone == WinScreenMode(winScreenModeGet, NULL, NULL, &curDepth, NULL)) {
 				
-				if (cur->version <= 3) {
+				BitmapPtr bestHr = NULL;
+				UInt8 bestHrDepth = 0;
+				BitmapPtr cur;
+				
+				osps->inWinDrawBitmapPatch = true;
+				
+				for (cur = bitmapP; cur; cur = BmpGlueGetNextBitmapAnyDensity(cur)) {
 					
-					UInt16 density = cur->version == 3 ? ((BitmapPtrV3)cur)->density : kDensityLow;
-					UInt8 depth = cur->pixelSize;
+					if (cur->version <= 3) {
+						
+						UInt16 density = cur->version == 3 ? ((BitmapPtrV3)cur)->density : kDensityLow;
+						UInt8 depth = cur->pixelSize;
+						
+						if (density == kDensityOneAndAHalf && ((depth <= curDepth && depth > bestHrDepth) || (curDepth == 8 && depth == 16 && bestHrDepth < 8 && osSupports16bppImages))) {
+							
+							bestHrDepth = depth;
+							bestHr = cur;
+						}
+					}
+				}
+				if (bestHr) {
+					
+					BitmapPtr v2 = osPatchesPrvV3bmpToV2bmp(bestHr);
 					
-					if (density == kDensityOneAndAHalf && ((depth <= curDepth && depth > bestHrDepth) || (curDepth == 8 && depth == 16 && bestHrDepth < 8 && osSupports16bppImages))) {
+					if (v2) {
 						
-						bestHrDepth = depth;
-						bestHr = cur;
+						WinDrawBitmap(v2, x, y);
+						MemPtrFree(v2);
+						
+						osps->inWinDrawBitmapPatch = false;
+						
+						return;
 					}
 				}
-			}
-			if (bestHr) {
 				
-				BitmapPtr v2 = osPatchesPrvV3bmpToV2bmp(bestHr);
-				
-				if (v2) {
-					
-					WinDrawBitmap(v2, x, y);
-					MemPtrFree(v2);
+				//do not call with a bitmap ver not supported by the system
+				if (bitmapP->version < 3) {
 					
+					VgaWinDrawBitmapExpanded(bitmapP, x, y);
 					osps->inWinDrawBitmapPatch = false;
 					
 					return;
 				}
 			}
-			
-			//do not call with a bitmap ver not supported by the system
-			if (bitmapP->version < 3) {
-				
-				VgaWinDrawBitmapExpanded(bitmapP, x, y);
-				osps->inWinDrawBitmapPatch = false;
-				
-				return;
-			}
 		}
+		
+		osps->oldTrapWinDrawBitmap(bitmapP, x, y);
 	}
-	
-	osps->oldTrapWinDrawBitmap(bitmapP, x, y);
-}
+#endif
 
-static void osPatchesWinDrawBitmapSony(BitmapPtr bitmapP, Coord x, Coord y)
-{
-	struct OsPatchState *osps = osPatchesGetState(false);
-	Boolean osSupports16bppImages;
-	UInt32 curDepth, romVersion;
-	UInt16 hrLibRef;
-	
-	if (!osps->winDrawBitmapPatchesDisabled) {
-		//this is wrong on the Visor Prism,but this patch is not enabled there...
-		osSupports16bppImages = errNone == FtrGet(sysFtrCreator, sysFtrNumROMVersion, &romVersion) && romVersion >= sysMakeROMVersion(4,0,0,sysROMStageRelease,0);
+#ifdef SONY_HIRES_SUPPORT
+	static void osPatchesWinDrawBitmapSony(BitmapPtr bitmapP, Coord x, Coord y)
+	{
+		struct OsPatchState *osps = osPatchesGetState(false);
+		Boolean osSupports16bppImages;
+		UInt32 curDepth, romVersion;
+		UInt16 hrLibRef;
 		
-		if (!osps->inWinDrawBitmapPatch && errNone == SysLibFind(sonySysLibNameHR, &hrLibRef) && hrLibRef != 0xffff && errNone == WinScreenMode(winScreenModeGet, NULL, NULL, &curDepth, NULL)) {
-			
-			BitmapPtr bestHr = NULL;
-			UInt8 bestHrDepth = 0;
-			BitmapPtr cur;
+		if (!osps->winDrawBitmapPatchesDisabled) {
+			//this is wrong on the Visor Prism,but this patch is not enabled there...
+			osSupports16bppImages = errNone == FtrGet(sysFtrCreator, sysFtrNumROMVersion, &romVersion) && romVersion >= sysMakeROMVersion(4,0,0,sysROMStageRelease,0);
 			
-			osps->inWinDrawBitmapPatch = true;
-			
-			for (cur = bitmapP; cur; cur = BmpGlueGetNextBitmapAnyDensity(cur)) {
+			if (!osps->inWinDrawBitmapPatch && errNone == SysLibFind(sonySysLibNameHR, &hrLibRef) && hrLibRef != 0xffff && errNone == WinScreenMode(winScreenModeGet, NULL, NULL, &curDepth, NULL)) {
 				
-				if (cur->version <= 3) {
-					
-					UInt16 density = cur->version == 3 ? ((BitmapPtrV3)cur)->density : kDensityLow;
-					UInt8 depth = cur->pixelSize;
+				BitmapPtr bestHr = NULL;
+				UInt8 bestHrDepth = 0;
+				BitmapPtr cur;
+				
+				osps->inWinDrawBitmapPatch = true;
+				
+				for (cur = bitmapP; cur; cur = BmpGlueGetNextBitmapAnyDensity(cur)) {
 					
-					if (density == kDensityDouble && ((depth <= curDepth && depth > bestHrDepth) || (curDepth == 8 && depth == 16 && bestHrDepth < 8 && osSupports16bppImages))) {
+					if (cur->version <= 3) {
 						
-						bestHrDepth = depth;
-						bestHr = cur;
+						UInt16 density = cur->version == 3 ? ((BitmapPtrV3)cur)->density : kDensityLow;
+						UInt8 depth = cur->pixelSize;
+						
+						if (density == kDensityDouble && ((depth <= curDepth && depth > bestHrDepth) || (curDepth == 8 && depth == 16 && bestHrDepth < 8 && osSupports16bppImages))) {
+							
+							bestHrDepth = depth;
+							bestHr = cur;
+						}
 					}
 				}
-			}
-			if (bestHr) {
-				
-				BitmapPtr v2 = osPatchesPrvV3bmpToV2bmp(bestHr);
-				
-				if (v2) {
-					
-					HRWinDrawBitmap(hrLibRef, v2, x * 2, y * 2);
-					MemPtrFree(v2);
+				if (bestHr) {
 					
-					osps->inWinDrawBitmapPatch = false;
+					BitmapPtr v2 = osPatchesPrvV3bmpToV2bmp(bestHr);
 					
-					return;
+					if (v2) {
+						
+						HRWinDrawBitmap(hrLibRef, v2, x * 2, y * 2);
+						MemPtrFree(v2);
+						
+						osps->inWinDrawBitmapPatch = false;
+						
+						return;
+					}
 				}
+				osps->inWinDrawBitmapPatch = false;
 			}
-			osps->inWinDrawBitmapPatch = false;
 		}
+		osps->oldTrapWinDrawBitmap(bitmapP, x, y);
 	}
-	osps->oldTrapWinDrawBitmap(bitmapP, x, y);
-}
+#endif
 
 void osPatchesInstall(void)
 {
@@ -416,7 +425,9 @@ void osPatchesInstall(void)
 		return;
 	
 	osps = osPatchesGetState(true);
+	(void)osps;	//quiet down GCC
 	
+#ifdef MORE_THAN_1BPP_SUPPORT
 	//PackBits compression only needs to be added for OS < 4.0 and OS >= 3.5 (it is only used for Bitmaps v2+ images which is new in PalmOS 3.5)
 	if (romVersion >= sysMakeROMVersion(3,5,0,sysROMStageDevelopment,0) && romVersion < sysMakeROMVersion(4,0,0,sysROMStageDevelopment,0)) {
 		
@@ -425,20 +436,25 @@ void osPatchesInstall(void)
 		SysSetTrapAddress(sysTrapScrDecompress, osPatchesScrDecompress);
 		SysSetTrapAddress(sysTrapBltCopyRectangle, osPatchesBltCopyRectangle);
 	}
-	
+#endif
+
+#ifdef SONY_HIRES_SUPPORT
 	//"drawing hi-res images on sony devices patch" is only needed for when HRLib is found and OS is < 5.0
 	if (romVersion < sysMakeROMVersion(5,0,0,sysROMStageDevelopment,0) && errNone == SysLibFind(sonySysLibNameHR, &hrLibRef) && hrLibRef != 0xffff) {
 	
 		osps->oldTrapWinDrawBitmap = SysGetTrapAddress(sysTrapWinDrawBitmap);
 		SysSetTrapAddress(sysTrapWinDrawBitmap, osPatchesWinDrawBitmapSony);
 	}
-	
+#endif
+
+#ifdef HANDERA_SUPPORT
 	//we also enable have a similar one for Handera, if we find a 1.5 density image (else 1.0 density is used and it will be upscaled)
 	if (isHanderaHiRes()) {
 	
 		osps->oldTrapWinDrawBitmap = SysGetTrapAddress(sysTrapWinDrawBitmap);
 		SysSetTrapAddress(sysTrapWinDrawBitmap, osPatchesWinDrawBitmapHandera);
 	}
+#endif
 }
 
 void osPatchesRemove(void)
